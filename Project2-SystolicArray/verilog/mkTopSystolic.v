//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Sun Nov 17 07:29:35 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_set_A_matrix_in            O     1 const
// RDY_set_B_matrix_in            O     1 const
// RDY_set_s1_or_s2_top           O     1 const
// get_matrix_mul_result          O   512 reg
// RDY_get_matrix_mul_result      O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_A_matrix_in_a_matrix_in    I   256 reg
// set_B_matrix_in_b_matrix_in    I   256 reg
// set_s1_or_s2_top_s1_or_s2_in   I     1 reg
// EN_set_A_matrix_in             I     1
// EN_set_B_matrix_in             I     1
// EN_set_s1_or_s2_top            I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTopSystolic(CLK,
		     RST_N,

		     set_A_matrix_in_a_matrix_in,
		     EN_set_A_matrix_in,
		     RDY_set_A_matrix_in,

		     set_B_matrix_in_b_matrix_in,
		     EN_set_B_matrix_in,
		     RDY_set_B_matrix_in,

		     set_s1_or_s2_top_s1_or_s2_in,
		     EN_set_s1_or_s2_top,
		     RDY_set_s1_or_s2_top,

		     get_matrix_mul_result,
		     RDY_get_matrix_mul_result);
  input  CLK;
  input  RST_N;

  // action method set_A_matrix_in
  input  [255 : 0] set_A_matrix_in_a_matrix_in;
  input  EN_set_A_matrix_in;
  output RDY_set_A_matrix_in;

  // action method set_B_matrix_in
  input  [255 : 0] set_B_matrix_in_b_matrix_in;
  input  EN_set_B_matrix_in;
  output RDY_set_B_matrix_in;

  // action method set_s1_or_s2_top
  input  set_s1_or_s2_top_s1_or_s2_in;
  input  EN_set_s1_or_s2_top;
  output RDY_set_s1_or_s2_top;

  // value method get_matrix_mul_result
  output [511 : 0] get_matrix_mul_result;
  output RDY_get_matrix_mul_result;

  // signals for module outputs
  wire [511 : 0] get_matrix_mul_result;
  wire RDY_get_matrix_mul_result,
       RDY_set_A_matrix_in,
       RDY_set_B_matrix_in,
       RDY_set_s1_or_s2_top;

  // register a_matrix_top_0_0
  reg [15 : 0] a_matrix_top_0_0;
  wire [15 : 0] a_matrix_top_0_0_D_IN;
  wire a_matrix_top_0_0_EN;

  // register a_matrix_top_0_1
  reg [15 : 0] a_matrix_top_0_1;
  wire [15 : 0] a_matrix_top_0_1_D_IN;
  wire a_matrix_top_0_1_EN;

  // register a_matrix_top_0_2
  reg [15 : 0] a_matrix_top_0_2;
  wire [15 : 0] a_matrix_top_0_2_D_IN;
  wire a_matrix_top_0_2_EN;

  // register a_matrix_top_0_3
  reg [15 : 0] a_matrix_top_0_3;
  wire [15 : 0] a_matrix_top_0_3_D_IN;
  wire a_matrix_top_0_3_EN;

  // register a_matrix_top_1_0
  reg [15 : 0] a_matrix_top_1_0;
  wire [15 : 0] a_matrix_top_1_0_D_IN;
  wire a_matrix_top_1_0_EN;

  // register a_matrix_top_1_1
  reg [15 : 0] a_matrix_top_1_1;
  wire [15 : 0] a_matrix_top_1_1_D_IN;
  wire a_matrix_top_1_1_EN;

  // register a_matrix_top_1_2
  reg [15 : 0] a_matrix_top_1_2;
  wire [15 : 0] a_matrix_top_1_2_D_IN;
  wire a_matrix_top_1_2_EN;

  // register a_matrix_top_1_3
  reg [15 : 0] a_matrix_top_1_3;
  wire [15 : 0] a_matrix_top_1_3_D_IN;
  wire a_matrix_top_1_3_EN;

  // register a_matrix_top_2_0
  reg [15 : 0] a_matrix_top_2_0;
  wire [15 : 0] a_matrix_top_2_0_D_IN;
  wire a_matrix_top_2_0_EN;

  // register a_matrix_top_2_1
  reg [15 : 0] a_matrix_top_2_1;
  wire [15 : 0] a_matrix_top_2_1_D_IN;
  wire a_matrix_top_2_1_EN;

  // register a_matrix_top_2_2
  reg [15 : 0] a_matrix_top_2_2;
  wire [15 : 0] a_matrix_top_2_2_D_IN;
  wire a_matrix_top_2_2_EN;

  // register a_matrix_top_2_3
  reg [15 : 0] a_matrix_top_2_3;
  wire [15 : 0] a_matrix_top_2_3_D_IN;
  wire a_matrix_top_2_3_EN;

  // register a_matrix_top_3_0
  reg [15 : 0] a_matrix_top_3_0;
  wire [15 : 0] a_matrix_top_3_0_D_IN;
  wire a_matrix_top_3_0_EN;

  // register a_matrix_top_3_1
  reg [15 : 0] a_matrix_top_3_1;
  wire [15 : 0] a_matrix_top_3_1_D_IN;
  wire a_matrix_top_3_1_EN;

  // register a_matrix_top_3_2
  reg [15 : 0] a_matrix_top_3_2;
  wire [15 : 0] a_matrix_top_3_2_D_IN;
  wire a_matrix_top_3_2_EN;

  // register a_matrix_top_3_3
  reg [15 : 0] a_matrix_top_3_3;
  wire [15 : 0] a_matrix_top_3_3_D_IN;
  wire a_matrix_top_3_3_EN;

  // register a_matrix_top_4_0
  reg [15 : 0] a_matrix_top_4_0;
  wire [15 : 0] a_matrix_top_4_0_D_IN;
  wire a_matrix_top_4_0_EN;

  // register a_matrix_top_4_1
  reg [15 : 0] a_matrix_top_4_1;
  wire [15 : 0] a_matrix_top_4_1_D_IN;
  wire a_matrix_top_4_1_EN;

  // register a_matrix_top_4_2
  reg [15 : 0] a_matrix_top_4_2;
  wire [15 : 0] a_matrix_top_4_2_D_IN;
  wire a_matrix_top_4_2_EN;

  // register a_matrix_top_4_3
  reg [15 : 0] a_matrix_top_4_3;
  wire [15 : 0] a_matrix_top_4_3_D_IN;
  wire a_matrix_top_4_3_EN;

  // register a_matrix_top_5_0
  reg [15 : 0] a_matrix_top_5_0;
  wire [15 : 0] a_matrix_top_5_0_D_IN;
  wire a_matrix_top_5_0_EN;

  // register a_matrix_top_5_1
  reg [15 : 0] a_matrix_top_5_1;
  wire [15 : 0] a_matrix_top_5_1_D_IN;
  wire a_matrix_top_5_1_EN;

  // register a_matrix_top_5_2
  reg [15 : 0] a_matrix_top_5_2;
  wire [15 : 0] a_matrix_top_5_2_D_IN;
  wire a_matrix_top_5_2_EN;

  // register a_matrix_top_5_3
  reg [15 : 0] a_matrix_top_5_3;
  wire [15 : 0] a_matrix_top_5_3_D_IN;
  wire a_matrix_top_5_3_EN;

  // register a_matrix_top_6_0
  reg [15 : 0] a_matrix_top_6_0;
  wire [15 : 0] a_matrix_top_6_0_D_IN;
  wire a_matrix_top_6_0_EN;

  // register a_matrix_top_6_1
  reg [15 : 0] a_matrix_top_6_1;
  wire [15 : 0] a_matrix_top_6_1_D_IN;
  wire a_matrix_top_6_1_EN;

  // register a_matrix_top_6_2
  reg [15 : 0] a_matrix_top_6_2;
  wire [15 : 0] a_matrix_top_6_2_D_IN;
  wire a_matrix_top_6_2_EN;

  // register a_matrix_top_6_3
  reg [15 : 0] a_matrix_top_6_3;
  wire [15 : 0] a_matrix_top_6_3_D_IN;
  wire a_matrix_top_6_3_EN;

  // register b_matrix_top_0_0
  reg [15 : 0] b_matrix_top_0_0;
  wire [15 : 0] b_matrix_top_0_0_D_IN;
  wire b_matrix_top_0_0_EN;

  // register b_matrix_top_0_1
  reg [15 : 0] b_matrix_top_0_1;
  wire [15 : 0] b_matrix_top_0_1_D_IN;
  wire b_matrix_top_0_1_EN;

  // register b_matrix_top_0_2
  reg [15 : 0] b_matrix_top_0_2;
  wire [15 : 0] b_matrix_top_0_2_D_IN;
  wire b_matrix_top_0_2_EN;

  // register b_matrix_top_0_3
  reg [15 : 0] b_matrix_top_0_3;
  wire [15 : 0] b_matrix_top_0_3_D_IN;
  wire b_matrix_top_0_3_EN;

  // register b_matrix_top_1_0
  reg [15 : 0] b_matrix_top_1_0;
  wire [15 : 0] b_matrix_top_1_0_D_IN;
  wire b_matrix_top_1_0_EN;

  // register b_matrix_top_1_1
  reg [15 : 0] b_matrix_top_1_1;
  wire [15 : 0] b_matrix_top_1_1_D_IN;
  wire b_matrix_top_1_1_EN;

  // register b_matrix_top_1_2
  reg [15 : 0] b_matrix_top_1_2;
  wire [15 : 0] b_matrix_top_1_2_D_IN;
  wire b_matrix_top_1_2_EN;

  // register b_matrix_top_1_3
  reg [15 : 0] b_matrix_top_1_3;
  wire [15 : 0] b_matrix_top_1_3_D_IN;
  wire b_matrix_top_1_3_EN;

  // register b_matrix_top_2_0
  reg [15 : 0] b_matrix_top_2_0;
  wire [15 : 0] b_matrix_top_2_0_D_IN;
  wire b_matrix_top_2_0_EN;

  // register b_matrix_top_2_1
  reg [15 : 0] b_matrix_top_2_1;
  wire [15 : 0] b_matrix_top_2_1_D_IN;
  wire b_matrix_top_2_1_EN;

  // register b_matrix_top_2_2
  reg [15 : 0] b_matrix_top_2_2;
  wire [15 : 0] b_matrix_top_2_2_D_IN;
  wire b_matrix_top_2_2_EN;

  // register b_matrix_top_2_3
  reg [15 : 0] b_matrix_top_2_3;
  wire [15 : 0] b_matrix_top_2_3_D_IN;
  wire b_matrix_top_2_3_EN;

  // register b_matrix_top_3_0
  reg [15 : 0] b_matrix_top_3_0;
  wire [15 : 0] b_matrix_top_3_0_D_IN;
  wire b_matrix_top_3_0_EN;

  // register b_matrix_top_3_1
  reg [15 : 0] b_matrix_top_3_1;
  wire [15 : 0] b_matrix_top_3_1_D_IN;
  wire b_matrix_top_3_1_EN;

  // register b_matrix_top_3_2
  reg [15 : 0] b_matrix_top_3_2;
  wire [15 : 0] b_matrix_top_3_2_D_IN;
  wire b_matrix_top_3_2_EN;

  // register b_matrix_top_3_3
  reg [15 : 0] b_matrix_top_3_3;
  wire [15 : 0] b_matrix_top_3_3_D_IN;
  wire b_matrix_top_3_3_EN;

  // register c_matrix_top_0_0
  reg [31 : 0] c_matrix_top_0_0;
  wire [31 : 0] c_matrix_top_0_0_D_IN;
  wire c_matrix_top_0_0_EN;

  // register c_matrix_top_0_1
  reg [31 : 0] c_matrix_top_0_1;
  wire [31 : 0] c_matrix_top_0_1_D_IN;
  wire c_matrix_top_0_1_EN;

  // register c_matrix_top_0_2
  reg [31 : 0] c_matrix_top_0_2;
  wire [31 : 0] c_matrix_top_0_2_D_IN;
  wire c_matrix_top_0_2_EN;

  // register c_matrix_top_0_3
  reg [31 : 0] c_matrix_top_0_3;
  wire [31 : 0] c_matrix_top_0_3_D_IN;
  wire c_matrix_top_0_3_EN;

  // register c_matrix_top_1_0
  reg [31 : 0] c_matrix_top_1_0;
  wire [31 : 0] c_matrix_top_1_0_D_IN;
  wire c_matrix_top_1_0_EN;

  // register c_matrix_top_1_1
  reg [31 : 0] c_matrix_top_1_1;
  wire [31 : 0] c_matrix_top_1_1_D_IN;
  wire c_matrix_top_1_1_EN;

  // register c_matrix_top_1_2
  reg [31 : 0] c_matrix_top_1_2;
  wire [31 : 0] c_matrix_top_1_2_D_IN;
  wire c_matrix_top_1_2_EN;

  // register c_matrix_top_1_3
  reg [31 : 0] c_matrix_top_1_3;
  wire [31 : 0] c_matrix_top_1_3_D_IN;
  wire c_matrix_top_1_3_EN;

  // register c_matrix_top_2_0
  reg [31 : 0] c_matrix_top_2_0;
  wire [31 : 0] c_matrix_top_2_0_D_IN;
  wire c_matrix_top_2_0_EN;

  // register c_matrix_top_2_1
  reg [31 : 0] c_matrix_top_2_1;
  wire [31 : 0] c_matrix_top_2_1_D_IN;
  wire c_matrix_top_2_1_EN;

  // register c_matrix_top_2_2
  reg [31 : 0] c_matrix_top_2_2;
  wire [31 : 0] c_matrix_top_2_2_D_IN;
  wire c_matrix_top_2_2_EN;

  // register c_matrix_top_2_3
  reg [31 : 0] c_matrix_top_2_3;
  wire [31 : 0] c_matrix_top_2_3_D_IN;
  wire c_matrix_top_2_3_EN;

  // register c_matrix_top_3_0
  reg [31 : 0] c_matrix_top_3_0;
  wire [31 : 0] c_matrix_top_3_0_D_IN;
  wire c_matrix_top_3_0_EN;

  // register c_matrix_top_3_1
  reg [31 : 0] c_matrix_top_3_1;
  wire [31 : 0] c_matrix_top_3_1_D_IN;
  wire c_matrix_top_3_1_EN;

  // register c_matrix_top_3_2
  reg [31 : 0] c_matrix_top_3_2;
  wire [31 : 0] c_matrix_top_3_2_D_IN;
  wire c_matrix_top_3_2_EN;

  // register c_matrix_top_3_3
  reg [31 : 0] c_matrix_top_3_3;
  wire [31 : 0] c_matrix_top_3_3_D_IN;
  wire c_matrix_top_3_3_EN;

  // register c_matrix_top_4_0
  reg [31 : 0] c_matrix_top_4_0;
  wire [31 : 0] c_matrix_top_4_0_D_IN;
  wire c_matrix_top_4_0_EN;

  // register c_matrix_top_4_1
  reg [31 : 0] c_matrix_top_4_1;
  wire [31 : 0] c_matrix_top_4_1_D_IN;
  wire c_matrix_top_4_1_EN;

  // register c_matrix_top_4_2
  reg [31 : 0] c_matrix_top_4_2;
  wire [31 : 0] c_matrix_top_4_2_D_IN;
  wire c_matrix_top_4_2_EN;

  // register c_matrix_top_4_3
  reg [31 : 0] c_matrix_top_4_3;
  wire [31 : 0] c_matrix_top_4_3_D_IN;
  wire c_matrix_top_4_3_EN;

  // register c_matrix_top_5_0
  reg [31 : 0] c_matrix_top_5_0;
  wire [31 : 0] c_matrix_top_5_0_D_IN;
  wire c_matrix_top_5_0_EN;

  // register c_matrix_top_5_1
  reg [31 : 0] c_matrix_top_5_1;
  wire [31 : 0] c_matrix_top_5_1_D_IN;
  wire c_matrix_top_5_1_EN;

  // register c_matrix_top_5_2
  reg [31 : 0] c_matrix_top_5_2;
  wire [31 : 0] c_matrix_top_5_2_D_IN;
  wire c_matrix_top_5_2_EN;

  // register c_matrix_top_5_3
  reg [31 : 0] c_matrix_top_5_3;
  wire [31 : 0] c_matrix_top_5_3_D_IN;
  wire c_matrix_top_5_3_EN;

  // register c_matrix_top_6_0
  reg [31 : 0] c_matrix_top_6_0;
  wire [31 : 0] c_matrix_top_6_0_D_IN;
  wire c_matrix_top_6_0_EN;

  // register c_matrix_top_6_1
  reg [31 : 0] c_matrix_top_6_1;
  wire [31 : 0] c_matrix_top_6_1_D_IN;
  wire c_matrix_top_6_1_EN;

  // register c_matrix_top_6_2
  reg [31 : 0] c_matrix_top_6_2;
  wire [31 : 0] c_matrix_top_6_2_D_IN;
  wire c_matrix_top_6_2_EN;

  // register c_matrix_top_6_3
  reg [31 : 0] c_matrix_top_6_3;
  wire [31 : 0] c_matrix_top_6_3_D_IN;
  wire c_matrix_top_6_3_EN;

  // register counter
  reg [31 : 0] counter;
  wire [31 : 0] counter_D_IN;
  wire counter_EN;

  // register s1_or_s2_systolic
  reg s1_or_s2_systolic;
  wire s1_or_s2_systolic_D_IN, s1_or_s2_systolic_EN;

  // ports of submodule systolic_unit
  reg [63 : 0] systolic_unit_set_A_matrix_a_matrix,
	       systolic_unit_set_B_matrix_b_matrix;
  wire [127 : 0] systolic_unit_get_result;
  wire [31 : 0] systolic_unit_set_C_row1_c_val;
  wire systolic_unit_EN_get_result,
       systolic_unit_EN_initialise_systolic,
       systolic_unit_EN_set_A_matrix,
       systolic_unit_EN_set_B_matrix,
       systolic_unit_EN_set_C_row1,
       systolic_unit_EN_set_s1_or_s2_row1,
       systolic_unit_EN_set_state_systolic,
       systolic_unit_RDY_get_result,
       systolic_unit_RDY_initialise_systolic,
       systolic_unit_RDY_set_A_matrix,
       systolic_unit_RDY_set_B_matrix,
       systolic_unit_RDY_set_C_row1,
       systolic_unit_RDY_set_s1_or_s2_row1,
       systolic_unit_initialise_systolic_s1_or_s2_in,
       systolic_unit_set_s1_or_s2_row1_s1_or_s2_in,
       systolic_unit_set_state_systolic_state_in;

  // rule scheduling signals
  wire CAN_FIRE_RL_a_column0,
       CAN_FIRE_RL_a_column1,
       CAN_FIRE_RL_a_column2,
       CAN_FIRE_RL_a_column3,
       CAN_FIRE_RL_a_column4,
       CAN_FIRE_RL_a_column5,
       CAN_FIRE_RL_a_column6,
       CAN_FIRE_RL_a_dummy1,
       CAN_FIRE_RL_a_dummy2,
       CAN_FIRE_RL_a_dummy3,
       CAN_FIRE_RL_b_row0,
       CAN_FIRE_RL_b_row1,
       CAN_FIRE_RL_b_row2,
       CAN_FIRE_RL_b_row3,
       CAN_FIRE_RL_c_column0,
       CAN_FIRE_RL_c_column1,
       CAN_FIRE_RL_c_column2,
       CAN_FIRE_RL_c_column3,
       CAN_FIRE_RL_c_column4,
       CAN_FIRE_RL_c_column5,
       CAN_FIRE_RL_c_column6,
       CAN_FIRE_RL_count_up,
       CAN_FIRE_set_A_matrix_in,
       CAN_FIRE_set_B_matrix_in,
       CAN_FIRE_set_s1_or_s2_top,
       WILL_FIRE_RL_a_column0,
       WILL_FIRE_RL_a_column1,
       WILL_FIRE_RL_a_column2,
       WILL_FIRE_RL_a_column3,
       WILL_FIRE_RL_a_column4,
       WILL_FIRE_RL_a_column5,
       WILL_FIRE_RL_a_column6,
       WILL_FIRE_RL_a_dummy1,
       WILL_FIRE_RL_a_dummy2,
       WILL_FIRE_RL_a_dummy3,
       WILL_FIRE_RL_b_row0,
       WILL_FIRE_RL_b_row1,
       WILL_FIRE_RL_b_row2,
       WILL_FIRE_RL_b_row3,
       WILL_FIRE_RL_c_column0,
       WILL_FIRE_RL_c_column1,
       WILL_FIRE_RL_c_column2,
       WILL_FIRE_RL_c_column3,
       WILL_FIRE_RL_c_column4,
       WILL_FIRE_RL_c_column5,
       WILL_FIRE_RL_c_column6,
       WILL_FIRE_RL_count_up,
       WILL_FIRE_set_A_matrix_in,
       WILL_FIRE_set_B_matrix_in,
       WILL_FIRE_set_s1_or_s2_top;

  // inputs to muxes for submodule ports
  wire [63 : 0] MUX_systolic_unit_set_A_matrix_1__VAL_1,
		MUX_systolic_unit_set_A_matrix_1__VAL_2,
		MUX_systolic_unit_set_A_matrix_1__VAL_3,
		MUX_systolic_unit_set_A_matrix_1__VAL_4,
		MUX_systolic_unit_set_A_matrix_1__VAL_5,
		MUX_systolic_unit_set_A_matrix_1__VAL_6,
		MUX_systolic_unit_set_A_matrix_1__VAL_7,
		MUX_systolic_unit_set_B_matrix_1__VAL_1,
		MUX_systolic_unit_set_B_matrix_1__VAL_2,
		MUX_systolic_unit_set_B_matrix_1__VAL_3,
		MUX_systolic_unit_set_B_matrix_1__VAL_4;
  wire MUX_systolic_unit_set_A_matrix_1__SEL_8;

  // action method set_A_matrix_in
  assign RDY_set_A_matrix_in = 1'd1 ;
  assign CAN_FIRE_set_A_matrix_in = 1'd1 ;
  assign WILL_FIRE_set_A_matrix_in = EN_set_A_matrix_in ;

  // action method set_B_matrix_in
  assign RDY_set_B_matrix_in = 1'd1 ;
  assign CAN_FIRE_set_B_matrix_in = 1'd1 ;
  assign WILL_FIRE_set_B_matrix_in = EN_set_B_matrix_in ;

  // action method set_s1_or_s2_top
  assign RDY_set_s1_or_s2_top = 1'd1 ;
  assign CAN_FIRE_set_s1_or_s2_top = 1'd1 ;
  assign WILL_FIRE_set_s1_or_s2_top = EN_set_s1_or_s2_top ;

  // value method get_matrix_mul_result
  assign get_matrix_mul_result =
	     { c_matrix_top_0_3,
	       c_matrix_top_1_2,
	       c_matrix_top_2_1,
	       c_matrix_top_3_0,
	       c_matrix_top_1_3,
	       c_matrix_top_2_2,
	       c_matrix_top_3_1,
	       c_matrix_top_4_0,
	       c_matrix_top_2_3,
	       c_matrix_top_3_2,
	       c_matrix_top_4_1,
	       c_matrix_top_5_0,
	       c_matrix_top_3_3,
	       c_matrix_top_4_2,
	       c_matrix_top_5_1,
	       c_matrix_top_6_0 } ;
  assign RDY_get_matrix_mul_result = 1'd1 ;

  // submodule systolic_unit
  mkSystolic systolic_unit(.CLK(CLK),
			   .RST_N(RST_N),
			   .initialise_systolic_s1_or_s2_in(systolic_unit_initialise_systolic_s1_or_s2_in),
			   .set_A_matrix_a_matrix(systolic_unit_set_A_matrix_a_matrix),
			   .set_B_matrix_b_matrix(systolic_unit_set_B_matrix_b_matrix),
			   .set_C_row1_c_val(systolic_unit_set_C_row1_c_val),
			   .set_s1_or_s2_row1_s1_or_s2_in(systolic_unit_set_s1_or_s2_row1_s1_or_s2_in),
			   .set_state_systolic_state_in(systolic_unit_set_state_systolic_state_in),
			   .EN_set_A_matrix(systolic_unit_EN_set_A_matrix),
			   .EN_set_B_matrix(systolic_unit_EN_set_B_matrix),
			   .EN_set_C_row1(systolic_unit_EN_set_C_row1),
			   .EN_set_s1_or_s2_row1(systolic_unit_EN_set_s1_or_s2_row1),
			   .EN_initialise_systolic(systolic_unit_EN_initialise_systolic),
			   .EN_set_state_systolic(systolic_unit_EN_set_state_systolic),
			   .EN_get_result(systolic_unit_EN_get_result),
			   .RDY_set_A_matrix(systolic_unit_RDY_set_A_matrix),
			   .RDY_set_B_matrix(systolic_unit_RDY_set_B_matrix),
			   .RDY_set_C_row1(systolic_unit_RDY_set_C_row1),
			   .RDY_set_s1_or_s2_row1(systolic_unit_RDY_set_s1_or_s2_row1),
			   .RDY_initialise_systolic(systolic_unit_RDY_initialise_systolic),
			   .RDY_set_state_systolic(),
			   .get_result(systolic_unit_get_result),
			   .RDY_get_result(systolic_unit_RDY_get_result));

  // rule RL_b_row3
  assign CAN_FIRE_RL_b_row3 =
	     systolic_unit_RDY_initialise_systolic &&
	     systolic_unit_RDY_set_B_matrix &&
	     counter == 32'd1 ;
  assign WILL_FIRE_RL_b_row3 = CAN_FIRE_RL_b_row3 ;

  // rule RL_b_row2
  assign CAN_FIRE_RL_b_row2 =
	     systolic_unit_RDY_set_B_matrix && counter == 32'd2 ;
  assign WILL_FIRE_RL_b_row2 = CAN_FIRE_RL_b_row2 ;

  // rule RL_b_row1
  assign CAN_FIRE_RL_b_row1 =
	     systolic_unit_RDY_set_B_matrix && counter == 32'd3 ;
  assign WILL_FIRE_RL_b_row1 = CAN_FIRE_RL_b_row1 ;

  // rule RL_b_row0
  assign CAN_FIRE_RL_b_row0 =
	     systolic_unit_RDY_set_B_matrix && counter == 32'd4 ;
  assign WILL_FIRE_RL_b_row0 = CAN_FIRE_RL_b_row0 ;

  // rule RL_a_column0
  assign CAN_FIRE_RL_a_column0 =
	     systolic_unit_RDY_set_A_matrix && counter == 32'd4 ;
  assign WILL_FIRE_RL_a_column0 = CAN_FIRE_RL_a_column0 ;

  // rule RL_a_column1
  assign CAN_FIRE_RL_a_column1 =
	     systolic_unit_RDY_set_s1_or_s2_row1 &&
	     systolic_unit_RDY_set_C_row1 &&
	     systolic_unit_RDY_set_A_matrix &&
	     counter == 32'd6 ;
  assign WILL_FIRE_RL_a_column1 = CAN_FIRE_RL_a_column1 ;

  // rule RL_a_column2
  assign CAN_FIRE_RL_a_column2 =
	     systolic_unit_RDY_set_s1_or_s2_row1 &&
	     systolic_unit_RDY_set_C_row1 &&
	     systolic_unit_RDY_set_A_matrix &&
	     counter == 32'd8 ;
  assign WILL_FIRE_RL_a_column2 = CAN_FIRE_RL_a_column2 ;

  // rule RL_a_column3
  assign CAN_FIRE_RL_a_column3 =
	     systolic_unit_RDY_set_s1_or_s2_row1 &&
	     systolic_unit_RDY_set_C_row1 &&
	     systolic_unit_RDY_set_A_matrix &&
	     counter == 32'd10 ;
  assign WILL_FIRE_RL_a_column3 = CAN_FIRE_RL_a_column3 ;

  // rule RL_a_column4
  assign CAN_FIRE_RL_a_column4 =
	     systolic_unit_RDY_set_s1_or_s2_row1 &&
	     systolic_unit_RDY_set_C_row1 &&
	     systolic_unit_RDY_set_A_matrix &&
	     counter == 32'd12 ;
  assign WILL_FIRE_RL_a_column4 = CAN_FIRE_RL_a_column4 ;

  // rule RL_a_column5
  assign CAN_FIRE_RL_a_column5 =
	     systolic_unit_RDY_set_s1_or_s2_row1 &&
	     systolic_unit_RDY_set_C_row1 &&
	     systolic_unit_RDY_set_A_matrix &&
	     counter == 32'd14 ;
  assign WILL_FIRE_RL_a_column5 = CAN_FIRE_RL_a_column5 ;

  // rule RL_a_column6
  assign CAN_FIRE_RL_a_column6 =
	     systolic_unit_RDY_set_s1_or_s2_row1 &&
	     systolic_unit_RDY_set_C_row1 &&
	     systolic_unit_RDY_set_A_matrix &&
	     counter == 32'd16 ;
  assign WILL_FIRE_RL_a_column6 = CAN_FIRE_RL_a_column6 ;

  // rule RL_a_dummy1
  assign CAN_FIRE_RL_a_dummy1 =
	     systolic_unit_RDY_set_s1_or_s2_row1 &&
	     systolic_unit_RDY_set_C_row1 &&
	     systolic_unit_RDY_set_A_matrix &&
	     counter == 32'd18 ;
  assign WILL_FIRE_RL_a_dummy1 = CAN_FIRE_RL_a_dummy1 ;

  // rule RL_a_dummy2
  assign CAN_FIRE_RL_a_dummy2 =
	     systolic_unit_RDY_set_s1_or_s2_row1 &&
	     systolic_unit_RDY_set_C_row1 &&
	     systolic_unit_RDY_set_A_matrix &&
	     counter == 32'd20 ;
  assign WILL_FIRE_RL_a_dummy2 = CAN_FIRE_RL_a_dummy2 ;

  // rule RL_a_dummy3
  assign CAN_FIRE_RL_a_dummy3 =
	     systolic_unit_RDY_set_s1_or_s2_row1 &&
	     systolic_unit_RDY_set_C_row1 &&
	     systolic_unit_RDY_set_A_matrix &&
	     counter == 32'd22 ;
  assign WILL_FIRE_RL_a_dummy3 = CAN_FIRE_RL_a_dummy3 ;

  // rule RL_c_column6
  assign CAN_FIRE_RL_c_column6 =
	     systolic_unit_RDY_get_result && counter == 32'd12 ;
  assign WILL_FIRE_RL_c_column6 = CAN_FIRE_RL_c_column6 ;

  // rule RL_c_column5
  assign CAN_FIRE_RL_c_column5 =
	     systolic_unit_RDY_get_result && counter == 32'd14 ;
  assign WILL_FIRE_RL_c_column5 = CAN_FIRE_RL_c_column5 ;

  // rule RL_c_column4
  assign CAN_FIRE_RL_c_column4 =
	     systolic_unit_RDY_get_result && counter == 32'd16 ;
  assign WILL_FIRE_RL_c_column4 = CAN_FIRE_RL_c_column4 ;

  // rule RL_c_column3
  assign CAN_FIRE_RL_c_column3 =
	     systolic_unit_RDY_get_result && counter == 32'd18 ;
  assign WILL_FIRE_RL_c_column3 = CAN_FIRE_RL_c_column3 ;

  // rule RL_c_column2
  assign CAN_FIRE_RL_c_column2 =
	     systolic_unit_RDY_get_result && counter == 32'd20 ;
  assign WILL_FIRE_RL_c_column2 = CAN_FIRE_RL_c_column2 ;

  // rule RL_c_column1
  assign CAN_FIRE_RL_c_column1 =
	     systolic_unit_RDY_get_result && counter == 32'd22 ;
  assign WILL_FIRE_RL_c_column1 = CAN_FIRE_RL_c_column1 ;

  // rule RL_c_column0
  assign CAN_FIRE_RL_c_column0 =
	     systolic_unit_RDY_get_result && counter == 32'd24 ;
  assign WILL_FIRE_RL_c_column0 = CAN_FIRE_RL_c_column0 ;

  // rule RL_count_up
  assign CAN_FIRE_RL_count_up = 1'd1 ;
  assign WILL_FIRE_RL_count_up = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_systolic_unit_set_A_matrix_1__SEL_8 =
	     WILL_FIRE_RL_a_dummy3 || WILL_FIRE_RL_a_dummy2 ||
	     WILL_FIRE_RL_a_dummy1 ;
  assign MUX_systolic_unit_set_A_matrix_1__VAL_1 =
	     { a_matrix_top_6_3,
	       a_matrix_top_6_2,
	       a_matrix_top_6_1,
	       a_matrix_top_6_0 } ;
  assign MUX_systolic_unit_set_A_matrix_1__VAL_2 =
	     { a_matrix_top_5_3,
	       a_matrix_top_5_2,
	       a_matrix_top_5_1,
	       a_matrix_top_5_0 } ;
  assign MUX_systolic_unit_set_A_matrix_1__VAL_3 =
	     { a_matrix_top_4_3,
	       a_matrix_top_4_2,
	       a_matrix_top_4_1,
	       a_matrix_top_4_0 } ;
  assign MUX_systolic_unit_set_A_matrix_1__VAL_4 =
	     { a_matrix_top_3_3,
	       a_matrix_top_3_2,
	       a_matrix_top_3_1,
	       a_matrix_top_3_0 } ;
  assign MUX_systolic_unit_set_A_matrix_1__VAL_5 =
	     { a_matrix_top_2_3,
	       a_matrix_top_2_2,
	       a_matrix_top_2_1,
	       a_matrix_top_2_0 } ;
  assign MUX_systolic_unit_set_A_matrix_1__VAL_6 =
	     { a_matrix_top_1_3,
	       a_matrix_top_1_2,
	       a_matrix_top_1_1,
	       a_matrix_top_1_0 } ;
  assign MUX_systolic_unit_set_A_matrix_1__VAL_7 =
	     { a_matrix_top_0_3,
	       a_matrix_top_0_2,
	       a_matrix_top_0_1,
	       a_matrix_top_0_0 } ;
  assign MUX_systolic_unit_set_B_matrix_1__VAL_1 =
	     { b_matrix_top_3_3,
	       b_matrix_top_3_2,
	       b_matrix_top_3_1,
	       b_matrix_top_3_0 } ;
  assign MUX_systolic_unit_set_B_matrix_1__VAL_2 =
	     { b_matrix_top_2_3,
	       b_matrix_top_2_2,
	       b_matrix_top_2_1,
	       b_matrix_top_2_0 } ;
  assign MUX_systolic_unit_set_B_matrix_1__VAL_3 =
	     { b_matrix_top_1_3,
	       b_matrix_top_1_2,
	       b_matrix_top_1_1,
	       b_matrix_top_1_0 } ;
  assign MUX_systolic_unit_set_B_matrix_1__VAL_4 =
	     { b_matrix_top_0_3,
	       b_matrix_top_0_2,
	       b_matrix_top_0_1,
	       b_matrix_top_0_0 } ;

  // register a_matrix_top_0_0
  assign a_matrix_top_0_0_D_IN = 16'd0 ;
  assign a_matrix_top_0_0_EN = EN_set_A_matrix_in ;

  // register a_matrix_top_0_1
  assign a_matrix_top_0_1_D_IN = 16'd0 ;
  assign a_matrix_top_0_1_EN = EN_set_A_matrix_in ;

  // register a_matrix_top_0_2
  assign a_matrix_top_0_2_D_IN = 16'd0 ;
  assign a_matrix_top_0_2_EN = EN_set_A_matrix_in ;

  // register a_matrix_top_0_3
  assign a_matrix_top_0_3_D_IN = set_A_matrix_in_a_matrix_in[255:240] ;
  assign a_matrix_top_0_3_EN = EN_set_A_matrix_in ;

  // register a_matrix_top_1_0
  assign a_matrix_top_1_0_D_IN = 16'd0 ;
  assign a_matrix_top_1_0_EN = EN_set_A_matrix_in ;

  // register a_matrix_top_1_1
  assign a_matrix_top_1_1_D_IN = 16'd0 ;
  assign a_matrix_top_1_1_EN = EN_set_A_matrix_in ;

  // register a_matrix_top_1_2
  assign a_matrix_top_1_2_D_IN = set_A_matrix_in_a_matrix_in[239:224] ;
  assign a_matrix_top_1_2_EN = EN_set_A_matrix_in ;

  // register a_matrix_top_1_3
  assign a_matrix_top_1_3_D_IN = set_A_matrix_in_a_matrix_in[191:176] ;
  assign a_matrix_top_1_3_EN = EN_set_A_matrix_in ;

  // register a_matrix_top_2_0
  assign a_matrix_top_2_0_D_IN = 16'd0 ;
  assign a_matrix_top_2_0_EN = EN_set_A_matrix_in ;

  // register a_matrix_top_2_1
  assign a_matrix_top_2_1_D_IN = set_A_matrix_in_a_matrix_in[223:208] ;
  assign a_matrix_top_2_1_EN = EN_set_A_matrix_in ;

  // register a_matrix_top_2_2
  assign a_matrix_top_2_2_D_IN = set_A_matrix_in_a_matrix_in[175:160] ;
  assign a_matrix_top_2_2_EN = EN_set_A_matrix_in ;

  // register a_matrix_top_2_3
  assign a_matrix_top_2_3_D_IN = set_A_matrix_in_a_matrix_in[127:112] ;
  assign a_matrix_top_2_3_EN = EN_set_A_matrix_in ;

  // register a_matrix_top_3_0
  assign a_matrix_top_3_0_D_IN = set_A_matrix_in_a_matrix_in[207:192] ;
  assign a_matrix_top_3_0_EN = EN_set_A_matrix_in ;

  // register a_matrix_top_3_1
  assign a_matrix_top_3_1_D_IN = set_A_matrix_in_a_matrix_in[159:144] ;
  assign a_matrix_top_3_1_EN = EN_set_A_matrix_in ;

  // register a_matrix_top_3_2
  assign a_matrix_top_3_2_D_IN = set_A_matrix_in_a_matrix_in[111:96] ;
  assign a_matrix_top_3_2_EN = EN_set_A_matrix_in ;

  // register a_matrix_top_3_3
  assign a_matrix_top_3_3_D_IN = set_A_matrix_in_a_matrix_in[63:48] ;
  assign a_matrix_top_3_3_EN = EN_set_A_matrix_in ;

  // register a_matrix_top_4_0
  assign a_matrix_top_4_0_D_IN = set_A_matrix_in_a_matrix_in[143:128] ;
  assign a_matrix_top_4_0_EN = EN_set_A_matrix_in ;

  // register a_matrix_top_4_1
  assign a_matrix_top_4_1_D_IN = set_A_matrix_in_a_matrix_in[95:80] ;
  assign a_matrix_top_4_1_EN = EN_set_A_matrix_in ;

  // register a_matrix_top_4_2
  assign a_matrix_top_4_2_D_IN = set_A_matrix_in_a_matrix_in[47:32] ;
  assign a_matrix_top_4_2_EN = EN_set_A_matrix_in ;

  // register a_matrix_top_4_3
  assign a_matrix_top_4_3_D_IN = 16'd0 ;
  assign a_matrix_top_4_3_EN = EN_set_A_matrix_in ;

  // register a_matrix_top_5_0
  assign a_matrix_top_5_0_D_IN = set_A_matrix_in_a_matrix_in[79:64] ;
  assign a_matrix_top_5_0_EN = EN_set_A_matrix_in ;

  // register a_matrix_top_5_1
  assign a_matrix_top_5_1_D_IN = set_A_matrix_in_a_matrix_in[31:16] ;
  assign a_matrix_top_5_1_EN = EN_set_A_matrix_in ;

  // register a_matrix_top_5_2
  assign a_matrix_top_5_2_D_IN = 16'd0 ;
  assign a_matrix_top_5_2_EN = EN_set_A_matrix_in ;

  // register a_matrix_top_5_3
  assign a_matrix_top_5_3_D_IN = 16'd0 ;
  assign a_matrix_top_5_3_EN = EN_set_A_matrix_in ;

  // register a_matrix_top_6_0
  assign a_matrix_top_6_0_D_IN = set_A_matrix_in_a_matrix_in[15:0] ;
  assign a_matrix_top_6_0_EN = EN_set_A_matrix_in ;

  // register a_matrix_top_6_1
  assign a_matrix_top_6_1_D_IN = 16'd0 ;
  assign a_matrix_top_6_1_EN = EN_set_A_matrix_in ;

  // register a_matrix_top_6_2
  assign a_matrix_top_6_2_D_IN = 16'd0 ;
  assign a_matrix_top_6_2_EN = EN_set_A_matrix_in ;

  // register a_matrix_top_6_3
  assign a_matrix_top_6_3_D_IN = 16'd0 ;
  assign a_matrix_top_6_3_EN = EN_set_A_matrix_in ;

  // register b_matrix_top_0_0
  assign b_matrix_top_0_0_D_IN = set_B_matrix_in_b_matrix_in[15:0] ;
  assign b_matrix_top_0_0_EN = EN_set_B_matrix_in ;

  // register b_matrix_top_0_1
  assign b_matrix_top_0_1_D_IN = set_B_matrix_in_b_matrix_in[31:16] ;
  assign b_matrix_top_0_1_EN = EN_set_B_matrix_in ;

  // register b_matrix_top_0_2
  assign b_matrix_top_0_2_D_IN = set_B_matrix_in_b_matrix_in[47:32] ;
  assign b_matrix_top_0_2_EN = EN_set_B_matrix_in ;

  // register b_matrix_top_0_3
  assign b_matrix_top_0_3_D_IN = set_B_matrix_in_b_matrix_in[63:48] ;
  assign b_matrix_top_0_3_EN = EN_set_B_matrix_in ;

  // register b_matrix_top_1_0
  assign b_matrix_top_1_0_D_IN = set_B_matrix_in_b_matrix_in[79:64] ;
  assign b_matrix_top_1_0_EN = EN_set_B_matrix_in ;

  // register b_matrix_top_1_1
  assign b_matrix_top_1_1_D_IN = set_B_matrix_in_b_matrix_in[95:80] ;
  assign b_matrix_top_1_1_EN = EN_set_B_matrix_in ;

  // register b_matrix_top_1_2
  assign b_matrix_top_1_2_D_IN = set_B_matrix_in_b_matrix_in[111:96] ;
  assign b_matrix_top_1_2_EN = EN_set_B_matrix_in ;

  // register b_matrix_top_1_3
  assign b_matrix_top_1_3_D_IN = set_B_matrix_in_b_matrix_in[127:112] ;
  assign b_matrix_top_1_3_EN = EN_set_B_matrix_in ;

  // register b_matrix_top_2_0
  assign b_matrix_top_2_0_D_IN = set_B_matrix_in_b_matrix_in[143:128] ;
  assign b_matrix_top_2_0_EN = EN_set_B_matrix_in ;

  // register b_matrix_top_2_1
  assign b_matrix_top_2_1_D_IN = set_B_matrix_in_b_matrix_in[159:144] ;
  assign b_matrix_top_2_1_EN = EN_set_B_matrix_in ;

  // register b_matrix_top_2_2
  assign b_matrix_top_2_2_D_IN = set_B_matrix_in_b_matrix_in[175:160] ;
  assign b_matrix_top_2_2_EN = EN_set_B_matrix_in ;

  // register b_matrix_top_2_3
  assign b_matrix_top_2_3_D_IN = set_B_matrix_in_b_matrix_in[191:176] ;
  assign b_matrix_top_2_3_EN = EN_set_B_matrix_in ;

  // register b_matrix_top_3_0
  assign b_matrix_top_3_0_D_IN = set_B_matrix_in_b_matrix_in[207:192] ;
  assign b_matrix_top_3_0_EN = EN_set_B_matrix_in ;

  // register b_matrix_top_3_1
  assign b_matrix_top_3_1_D_IN = set_B_matrix_in_b_matrix_in[223:208] ;
  assign b_matrix_top_3_1_EN = EN_set_B_matrix_in ;

  // register b_matrix_top_3_2
  assign b_matrix_top_3_2_D_IN = set_B_matrix_in_b_matrix_in[239:224] ;
  assign b_matrix_top_3_2_EN = EN_set_B_matrix_in ;

  // register b_matrix_top_3_3
  assign b_matrix_top_3_3_D_IN = set_B_matrix_in_b_matrix_in[255:240] ;
  assign b_matrix_top_3_3_EN = EN_set_B_matrix_in ;

  // register c_matrix_top_0_0
  assign c_matrix_top_0_0_D_IN = systolic_unit_get_result[31:0] ;
  assign c_matrix_top_0_0_EN = CAN_FIRE_RL_c_column0 ;

  // register c_matrix_top_0_1
  assign c_matrix_top_0_1_D_IN = systolic_unit_get_result[63:32] ;
  assign c_matrix_top_0_1_EN = CAN_FIRE_RL_c_column0 ;

  // register c_matrix_top_0_2
  assign c_matrix_top_0_2_D_IN = systolic_unit_get_result[95:64] ;
  assign c_matrix_top_0_2_EN = CAN_FIRE_RL_c_column0 ;

  // register c_matrix_top_0_3
  assign c_matrix_top_0_3_D_IN = systolic_unit_get_result[127:96] ;
  assign c_matrix_top_0_3_EN = CAN_FIRE_RL_c_column0 ;

  // register c_matrix_top_1_0
  assign c_matrix_top_1_0_D_IN = systolic_unit_get_result[31:0] ;
  assign c_matrix_top_1_0_EN = CAN_FIRE_RL_c_column1 ;

  // register c_matrix_top_1_1
  assign c_matrix_top_1_1_D_IN = systolic_unit_get_result[63:32] ;
  assign c_matrix_top_1_1_EN = CAN_FIRE_RL_c_column1 ;

  // register c_matrix_top_1_2
  assign c_matrix_top_1_2_D_IN = systolic_unit_get_result[95:64] ;
  assign c_matrix_top_1_2_EN = CAN_FIRE_RL_c_column1 ;

  // register c_matrix_top_1_3
  assign c_matrix_top_1_3_D_IN = systolic_unit_get_result[127:96] ;
  assign c_matrix_top_1_3_EN = CAN_FIRE_RL_c_column1 ;

  // register c_matrix_top_2_0
  assign c_matrix_top_2_0_D_IN = systolic_unit_get_result[31:0] ;
  assign c_matrix_top_2_0_EN = CAN_FIRE_RL_c_column2 ;

  // register c_matrix_top_2_1
  assign c_matrix_top_2_1_D_IN = systolic_unit_get_result[63:32] ;
  assign c_matrix_top_2_1_EN = CAN_FIRE_RL_c_column2 ;

  // register c_matrix_top_2_2
  assign c_matrix_top_2_2_D_IN = systolic_unit_get_result[95:64] ;
  assign c_matrix_top_2_2_EN = CAN_FIRE_RL_c_column2 ;

  // register c_matrix_top_2_3
  assign c_matrix_top_2_3_D_IN = systolic_unit_get_result[127:96] ;
  assign c_matrix_top_2_3_EN = CAN_FIRE_RL_c_column2 ;

  // register c_matrix_top_3_0
  assign c_matrix_top_3_0_D_IN = systolic_unit_get_result[31:0] ;
  assign c_matrix_top_3_0_EN = CAN_FIRE_RL_c_column3 ;

  // register c_matrix_top_3_1
  assign c_matrix_top_3_1_D_IN = systolic_unit_get_result[63:32] ;
  assign c_matrix_top_3_1_EN = CAN_FIRE_RL_c_column3 ;

  // register c_matrix_top_3_2
  assign c_matrix_top_3_2_D_IN = systolic_unit_get_result[95:64] ;
  assign c_matrix_top_3_2_EN = CAN_FIRE_RL_c_column3 ;

  // register c_matrix_top_3_3
  assign c_matrix_top_3_3_D_IN = systolic_unit_get_result[127:96] ;
  assign c_matrix_top_3_3_EN = CAN_FIRE_RL_c_column3 ;

  // register c_matrix_top_4_0
  assign c_matrix_top_4_0_D_IN = systolic_unit_get_result[31:0] ;
  assign c_matrix_top_4_0_EN = CAN_FIRE_RL_c_column4 ;

  // register c_matrix_top_4_1
  assign c_matrix_top_4_1_D_IN = systolic_unit_get_result[63:32] ;
  assign c_matrix_top_4_1_EN = CAN_FIRE_RL_c_column4 ;

  // register c_matrix_top_4_2
  assign c_matrix_top_4_2_D_IN = systolic_unit_get_result[95:64] ;
  assign c_matrix_top_4_2_EN = CAN_FIRE_RL_c_column4 ;

  // register c_matrix_top_4_3
  assign c_matrix_top_4_3_D_IN = systolic_unit_get_result[127:96] ;
  assign c_matrix_top_4_3_EN = CAN_FIRE_RL_c_column4 ;

  // register c_matrix_top_5_0
  assign c_matrix_top_5_0_D_IN = systolic_unit_get_result[31:0] ;
  assign c_matrix_top_5_0_EN = CAN_FIRE_RL_c_column5 ;

  // register c_matrix_top_5_1
  assign c_matrix_top_5_1_D_IN = systolic_unit_get_result[63:32] ;
  assign c_matrix_top_5_1_EN = CAN_FIRE_RL_c_column5 ;

  // register c_matrix_top_5_2
  assign c_matrix_top_5_2_D_IN = systolic_unit_get_result[95:64] ;
  assign c_matrix_top_5_2_EN = CAN_FIRE_RL_c_column5 ;

  // register c_matrix_top_5_3
  assign c_matrix_top_5_3_D_IN = systolic_unit_get_result[127:96] ;
  assign c_matrix_top_5_3_EN = CAN_FIRE_RL_c_column5 ;

  // register c_matrix_top_6_0
  assign c_matrix_top_6_0_D_IN = systolic_unit_get_result[31:0] ;
  assign c_matrix_top_6_0_EN = CAN_FIRE_RL_c_column6 ;

  // register c_matrix_top_6_1
  assign c_matrix_top_6_1_D_IN = systolic_unit_get_result[63:32] ;
  assign c_matrix_top_6_1_EN = CAN_FIRE_RL_c_column6 ;

  // register c_matrix_top_6_2
  assign c_matrix_top_6_2_D_IN = systolic_unit_get_result[95:64] ;
  assign c_matrix_top_6_2_EN = CAN_FIRE_RL_c_column6 ;

  // register c_matrix_top_6_3
  assign c_matrix_top_6_3_D_IN = systolic_unit_get_result[127:96] ;
  assign c_matrix_top_6_3_EN = CAN_FIRE_RL_c_column6 ;

  // register counter
  assign counter_D_IN = counter + 32'd1 ;
  assign counter_EN = 1'd1 ;

  // register s1_or_s2_systolic
  assign s1_or_s2_systolic_D_IN = set_s1_or_s2_top_s1_or_s2_in ;
  assign s1_or_s2_systolic_EN = EN_set_s1_or_s2_top ;

  // submodule systolic_unit
  assign systolic_unit_initialise_systolic_s1_or_s2_in = s1_or_s2_systolic ;
  always@(WILL_FIRE_RL_a_column0 or
	  MUX_systolic_unit_set_A_matrix_1__VAL_1 or
	  WILL_FIRE_RL_a_column1 or
	  MUX_systolic_unit_set_A_matrix_1__VAL_2 or
	  WILL_FIRE_RL_a_column2 or
	  MUX_systolic_unit_set_A_matrix_1__VAL_3 or
	  WILL_FIRE_RL_a_column3 or
	  MUX_systolic_unit_set_A_matrix_1__VAL_4 or
	  WILL_FIRE_RL_a_column4 or
	  MUX_systolic_unit_set_A_matrix_1__VAL_5 or
	  WILL_FIRE_RL_a_column5 or
	  MUX_systolic_unit_set_A_matrix_1__VAL_6 or
	  WILL_FIRE_RL_a_column6 or
	  MUX_systolic_unit_set_A_matrix_1__VAL_7 or
	  MUX_systolic_unit_set_A_matrix_1__SEL_8)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_a_column0:
	  systolic_unit_set_A_matrix_a_matrix =
	      MUX_systolic_unit_set_A_matrix_1__VAL_1;
      WILL_FIRE_RL_a_column1:
	  systolic_unit_set_A_matrix_a_matrix =
	      MUX_systolic_unit_set_A_matrix_1__VAL_2;
      WILL_FIRE_RL_a_column2:
	  systolic_unit_set_A_matrix_a_matrix =
	      MUX_systolic_unit_set_A_matrix_1__VAL_3;
      WILL_FIRE_RL_a_column3:
	  systolic_unit_set_A_matrix_a_matrix =
	      MUX_systolic_unit_set_A_matrix_1__VAL_4;
      WILL_FIRE_RL_a_column4:
	  systolic_unit_set_A_matrix_a_matrix =
	      MUX_systolic_unit_set_A_matrix_1__VAL_5;
      WILL_FIRE_RL_a_column5:
	  systolic_unit_set_A_matrix_a_matrix =
	      MUX_systolic_unit_set_A_matrix_1__VAL_6;
      WILL_FIRE_RL_a_column6:
	  systolic_unit_set_A_matrix_a_matrix =
	      MUX_systolic_unit_set_A_matrix_1__VAL_7;
      MUX_systolic_unit_set_A_matrix_1__SEL_8:
	  systolic_unit_set_A_matrix_a_matrix = 64'd0;
      default: systolic_unit_set_A_matrix_a_matrix =
		   64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_b_row3 or
	  MUX_systolic_unit_set_B_matrix_1__VAL_1 or
	  WILL_FIRE_RL_b_row2 or
	  MUX_systolic_unit_set_B_matrix_1__VAL_2 or
	  WILL_FIRE_RL_b_row1 or
	  MUX_systolic_unit_set_B_matrix_1__VAL_3 or
	  WILL_FIRE_RL_b_row0 or MUX_systolic_unit_set_B_matrix_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_b_row3:
	  systolic_unit_set_B_matrix_b_matrix =
	      MUX_systolic_unit_set_B_matrix_1__VAL_1;
      WILL_FIRE_RL_b_row2:
	  systolic_unit_set_B_matrix_b_matrix =
	      MUX_systolic_unit_set_B_matrix_1__VAL_2;
      WILL_FIRE_RL_b_row1:
	  systolic_unit_set_B_matrix_b_matrix =
	      MUX_systolic_unit_set_B_matrix_1__VAL_3;
      WILL_FIRE_RL_b_row0:
	  systolic_unit_set_B_matrix_b_matrix =
	      MUX_systolic_unit_set_B_matrix_1__VAL_4;
      default: systolic_unit_set_B_matrix_b_matrix =
		   64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign systolic_unit_set_C_row1_c_val = 32'b0 ;
  assign systolic_unit_set_s1_or_s2_row1_s1_or_s2_in = s1_or_s2_systolic ;
  assign systolic_unit_set_state_systolic_state_in = !WILL_FIRE_RL_b_row0 ;
  assign systolic_unit_EN_set_A_matrix =
	     WILL_FIRE_RL_a_column0 || WILL_FIRE_RL_a_column1 ||
	     WILL_FIRE_RL_a_column2 ||
	     WILL_FIRE_RL_a_column3 ||
	     WILL_FIRE_RL_a_column4 ||
	     WILL_FIRE_RL_a_column5 ||
	     WILL_FIRE_RL_a_column6 ||
	     WILL_FIRE_RL_a_dummy3 ||
	     WILL_FIRE_RL_a_dummy2 ||
	     WILL_FIRE_RL_a_dummy1 ;
  assign systolic_unit_EN_set_B_matrix =
	     WILL_FIRE_RL_b_row3 || WILL_FIRE_RL_b_row2 ||
	     WILL_FIRE_RL_b_row1 ||
	     WILL_FIRE_RL_b_row0 ;
  assign systolic_unit_EN_set_C_row1 =
	     WILL_FIRE_RL_a_dummy3 || WILL_FIRE_RL_a_dummy2 ||
	     WILL_FIRE_RL_a_dummy1 ||
	     WILL_FIRE_RL_a_column6 ||
	     WILL_FIRE_RL_a_column5 ||
	     WILL_FIRE_RL_a_column4 ||
	     WILL_FIRE_RL_a_column3 ||
	     WILL_FIRE_RL_a_column2 ||
	     WILL_FIRE_RL_a_column1 ;
  assign systolic_unit_EN_set_s1_or_s2_row1 =
	     WILL_FIRE_RL_a_dummy3 || WILL_FIRE_RL_a_dummy2 ||
	     WILL_FIRE_RL_a_dummy1 ||
	     WILL_FIRE_RL_a_column6 ||
	     WILL_FIRE_RL_a_column5 ||
	     WILL_FIRE_RL_a_column4 ||
	     WILL_FIRE_RL_a_column3 ||
	     WILL_FIRE_RL_a_column2 ||
	     WILL_FIRE_RL_a_column1 ;
  assign systolic_unit_EN_initialise_systolic = CAN_FIRE_RL_b_row3 ;
  assign systolic_unit_EN_set_state_systolic =
	     WILL_FIRE_RL_b_row0 || WILL_FIRE_RL_b_row3 ;
  assign systolic_unit_EN_get_result =
	     WILL_FIRE_RL_c_column0 || WILL_FIRE_RL_c_column1 ||
	     WILL_FIRE_RL_c_column2 ||
	     WILL_FIRE_RL_c_column3 ||
	     WILL_FIRE_RL_c_column4 ||
	     WILL_FIRE_RL_c_column5 ||
	     WILL_FIRE_RL_c_column6 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        a_matrix_top_0_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	a_matrix_top_0_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	a_matrix_top_0_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	a_matrix_top_0_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	a_matrix_top_1_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	a_matrix_top_1_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	a_matrix_top_1_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	a_matrix_top_1_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	a_matrix_top_2_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	a_matrix_top_2_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	a_matrix_top_2_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	a_matrix_top_2_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	a_matrix_top_3_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	a_matrix_top_3_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	a_matrix_top_3_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	a_matrix_top_3_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	a_matrix_top_4_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	a_matrix_top_4_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	a_matrix_top_4_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	a_matrix_top_4_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	a_matrix_top_5_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	a_matrix_top_5_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	a_matrix_top_5_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	a_matrix_top_5_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	a_matrix_top_6_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	a_matrix_top_6_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	a_matrix_top_6_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	a_matrix_top_6_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b_matrix_top_0_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b_matrix_top_0_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b_matrix_top_0_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b_matrix_top_0_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b_matrix_top_1_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b_matrix_top_1_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b_matrix_top_1_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b_matrix_top_1_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b_matrix_top_2_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b_matrix_top_2_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b_matrix_top_2_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b_matrix_top_2_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b_matrix_top_3_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b_matrix_top_3_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b_matrix_top_3_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b_matrix_top_3_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	c_matrix_top_0_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	c_matrix_top_0_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	c_matrix_top_0_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	c_matrix_top_0_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	c_matrix_top_1_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	c_matrix_top_1_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	c_matrix_top_1_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	c_matrix_top_1_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	c_matrix_top_2_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	c_matrix_top_2_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	c_matrix_top_2_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	c_matrix_top_2_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	c_matrix_top_3_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	c_matrix_top_3_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	c_matrix_top_3_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	c_matrix_top_3_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	c_matrix_top_4_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	c_matrix_top_4_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	c_matrix_top_4_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	c_matrix_top_4_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	c_matrix_top_5_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	c_matrix_top_5_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	c_matrix_top_5_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	c_matrix_top_5_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	c_matrix_top_6_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	c_matrix_top_6_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	c_matrix_top_6_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	c_matrix_top_6_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	counter <= `BSV_ASSIGNMENT_DELAY 32'd0;
	s1_or_s2_systolic <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (a_matrix_top_0_0_EN)
	  a_matrix_top_0_0 <= `BSV_ASSIGNMENT_DELAY a_matrix_top_0_0_D_IN;
	if (a_matrix_top_0_1_EN)
	  a_matrix_top_0_1 <= `BSV_ASSIGNMENT_DELAY a_matrix_top_0_1_D_IN;
	if (a_matrix_top_0_2_EN)
	  a_matrix_top_0_2 <= `BSV_ASSIGNMENT_DELAY a_matrix_top_0_2_D_IN;
	if (a_matrix_top_0_3_EN)
	  a_matrix_top_0_3 <= `BSV_ASSIGNMENT_DELAY a_matrix_top_0_3_D_IN;
	if (a_matrix_top_1_0_EN)
	  a_matrix_top_1_0 <= `BSV_ASSIGNMENT_DELAY a_matrix_top_1_0_D_IN;
	if (a_matrix_top_1_1_EN)
	  a_matrix_top_1_1 <= `BSV_ASSIGNMENT_DELAY a_matrix_top_1_1_D_IN;
	if (a_matrix_top_1_2_EN)
	  a_matrix_top_1_2 <= `BSV_ASSIGNMENT_DELAY a_matrix_top_1_2_D_IN;
	if (a_matrix_top_1_3_EN)
	  a_matrix_top_1_3 <= `BSV_ASSIGNMENT_DELAY a_matrix_top_1_3_D_IN;
	if (a_matrix_top_2_0_EN)
	  a_matrix_top_2_0 <= `BSV_ASSIGNMENT_DELAY a_matrix_top_2_0_D_IN;
	if (a_matrix_top_2_1_EN)
	  a_matrix_top_2_1 <= `BSV_ASSIGNMENT_DELAY a_matrix_top_2_1_D_IN;
	if (a_matrix_top_2_2_EN)
	  a_matrix_top_2_2 <= `BSV_ASSIGNMENT_DELAY a_matrix_top_2_2_D_IN;
	if (a_matrix_top_2_3_EN)
	  a_matrix_top_2_3 <= `BSV_ASSIGNMENT_DELAY a_matrix_top_2_3_D_IN;
	if (a_matrix_top_3_0_EN)
	  a_matrix_top_3_0 <= `BSV_ASSIGNMENT_DELAY a_matrix_top_3_0_D_IN;
	if (a_matrix_top_3_1_EN)
	  a_matrix_top_3_1 <= `BSV_ASSIGNMENT_DELAY a_matrix_top_3_1_D_IN;
	if (a_matrix_top_3_2_EN)
	  a_matrix_top_3_2 <= `BSV_ASSIGNMENT_DELAY a_matrix_top_3_2_D_IN;
	if (a_matrix_top_3_3_EN)
	  a_matrix_top_3_3 <= `BSV_ASSIGNMENT_DELAY a_matrix_top_3_3_D_IN;
	if (a_matrix_top_4_0_EN)
	  a_matrix_top_4_0 <= `BSV_ASSIGNMENT_DELAY a_matrix_top_4_0_D_IN;
	if (a_matrix_top_4_1_EN)
	  a_matrix_top_4_1 <= `BSV_ASSIGNMENT_DELAY a_matrix_top_4_1_D_IN;
	if (a_matrix_top_4_2_EN)
	  a_matrix_top_4_2 <= `BSV_ASSIGNMENT_DELAY a_matrix_top_4_2_D_IN;
	if (a_matrix_top_4_3_EN)
	  a_matrix_top_4_3 <= `BSV_ASSIGNMENT_DELAY a_matrix_top_4_3_D_IN;
	if (a_matrix_top_5_0_EN)
	  a_matrix_top_5_0 <= `BSV_ASSIGNMENT_DELAY a_matrix_top_5_0_D_IN;
	if (a_matrix_top_5_1_EN)
	  a_matrix_top_5_1 <= `BSV_ASSIGNMENT_DELAY a_matrix_top_5_1_D_IN;
	if (a_matrix_top_5_2_EN)
	  a_matrix_top_5_2 <= `BSV_ASSIGNMENT_DELAY a_matrix_top_5_2_D_IN;
	if (a_matrix_top_5_3_EN)
	  a_matrix_top_5_3 <= `BSV_ASSIGNMENT_DELAY a_matrix_top_5_3_D_IN;
	if (a_matrix_top_6_0_EN)
	  a_matrix_top_6_0 <= `BSV_ASSIGNMENT_DELAY a_matrix_top_6_0_D_IN;
	if (a_matrix_top_6_1_EN)
	  a_matrix_top_6_1 <= `BSV_ASSIGNMENT_DELAY a_matrix_top_6_1_D_IN;
	if (a_matrix_top_6_2_EN)
	  a_matrix_top_6_2 <= `BSV_ASSIGNMENT_DELAY a_matrix_top_6_2_D_IN;
	if (a_matrix_top_6_3_EN)
	  a_matrix_top_6_3 <= `BSV_ASSIGNMENT_DELAY a_matrix_top_6_3_D_IN;
	if (b_matrix_top_0_0_EN)
	  b_matrix_top_0_0 <= `BSV_ASSIGNMENT_DELAY b_matrix_top_0_0_D_IN;
	if (b_matrix_top_0_1_EN)
	  b_matrix_top_0_1 <= `BSV_ASSIGNMENT_DELAY b_matrix_top_0_1_D_IN;
	if (b_matrix_top_0_2_EN)
	  b_matrix_top_0_2 <= `BSV_ASSIGNMENT_DELAY b_matrix_top_0_2_D_IN;
	if (b_matrix_top_0_3_EN)
	  b_matrix_top_0_3 <= `BSV_ASSIGNMENT_DELAY b_matrix_top_0_3_D_IN;
	if (b_matrix_top_1_0_EN)
	  b_matrix_top_1_0 <= `BSV_ASSIGNMENT_DELAY b_matrix_top_1_0_D_IN;
	if (b_matrix_top_1_1_EN)
	  b_matrix_top_1_1 <= `BSV_ASSIGNMENT_DELAY b_matrix_top_1_1_D_IN;
	if (b_matrix_top_1_2_EN)
	  b_matrix_top_1_2 <= `BSV_ASSIGNMENT_DELAY b_matrix_top_1_2_D_IN;
	if (b_matrix_top_1_3_EN)
	  b_matrix_top_1_3 <= `BSV_ASSIGNMENT_DELAY b_matrix_top_1_3_D_IN;
	if (b_matrix_top_2_0_EN)
	  b_matrix_top_2_0 <= `BSV_ASSIGNMENT_DELAY b_matrix_top_2_0_D_IN;
	if (b_matrix_top_2_1_EN)
	  b_matrix_top_2_1 <= `BSV_ASSIGNMENT_DELAY b_matrix_top_2_1_D_IN;
	if (b_matrix_top_2_2_EN)
	  b_matrix_top_2_2 <= `BSV_ASSIGNMENT_DELAY b_matrix_top_2_2_D_IN;
	if (b_matrix_top_2_3_EN)
	  b_matrix_top_2_3 <= `BSV_ASSIGNMENT_DELAY b_matrix_top_2_3_D_IN;
	if (b_matrix_top_3_0_EN)
	  b_matrix_top_3_0 <= `BSV_ASSIGNMENT_DELAY b_matrix_top_3_0_D_IN;
	if (b_matrix_top_3_1_EN)
	  b_matrix_top_3_1 <= `BSV_ASSIGNMENT_DELAY b_matrix_top_3_1_D_IN;
	if (b_matrix_top_3_2_EN)
	  b_matrix_top_3_2 <= `BSV_ASSIGNMENT_DELAY b_matrix_top_3_2_D_IN;
	if (b_matrix_top_3_3_EN)
	  b_matrix_top_3_3 <= `BSV_ASSIGNMENT_DELAY b_matrix_top_3_3_D_IN;
	if (c_matrix_top_0_0_EN)
	  c_matrix_top_0_0 <= `BSV_ASSIGNMENT_DELAY c_matrix_top_0_0_D_IN;
	if (c_matrix_top_0_1_EN)
	  c_matrix_top_0_1 <= `BSV_ASSIGNMENT_DELAY c_matrix_top_0_1_D_IN;
	if (c_matrix_top_0_2_EN)
	  c_matrix_top_0_2 <= `BSV_ASSIGNMENT_DELAY c_matrix_top_0_2_D_IN;
	if (c_matrix_top_0_3_EN)
	  c_matrix_top_0_3 <= `BSV_ASSIGNMENT_DELAY c_matrix_top_0_3_D_IN;
	if (c_matrix_top_1_0_EN)
	  c_matrix_top_1_0 <= `BSV_ASSIGNMENT_DELAY c_matrix_top_1_0_D_IN;
	if (c_matrix_top_1_1_EN)
	  c_matrix_top_1_1 <= `BSV_ASSIGNMENT_DELAY c_matrix_top_1_1_D_IN;
	if (c_matrix_top_1_2_EN)
	  c_matrix_top_1_2 <= `BSV_ASSIGNMENT_DELAY c_matrix_top_1_2_D_IN;
	if (c_matrix_top_1_3_EN)
	  c_matrix_top_1_3 <= `BSV_ASSIGNMENT_DELAY c_matrix_top_1_3_D_IN;
	if (c_matrix_top_2_0_EN)
	  c_matrix_top_2_0 <= `BSV_ASSIGNMENT_DELAY c_matrix_top_2_0_D_IN;
	if (c_matrix_top_2_1_EN)
	  c_matrix_top_2_1 <= `BSV_ASSIGNMENT_DELAY c_matrix_top_2_1_D_IN;
	if (c_matrix_top_2_2_EN)
	  c_matrix_top_2_2 <= `BSV_ASSIGNMENT_DELAY c_matrix_top_2_2_D_IN;
	if (c_matrix_top_2_3_EN)
	  c_matrix_top_2_3 <= `BSV_ASSIGNMENT_DELAY c_matrix_top_2_3_D_IN;
	if (c_matrix_top_3_0_EN)
	  c_matrix_top_3_0 <= `BSV_ASSIGNMENT_DELAY c_matrix_top_3_0_D_IN;
	if (c_matrix_top_3_1_EN)
	  c_matrix_top_3_1 <= `BSV_ASSIGNMENT_DELAY c_matrix_top_3_1_D_IN;
	if (c_matrix_top_3_2_EN)
	  c_matrix_top_3_2 <= `BSV_ASSIGNMENT_DELAY c_matrix_top_3_2_D_IN;
	if (c_matrix_top_3_3_EN)
	  c_matrix_top_3_3 <= `BSV_ASSIGNMENT_DELAY c_matrix_top_3_3_D_IN;
	if (c_matrix_top_4_0_EN)
	  c_matrix_top_4_0 <= `BSV_ASSIGNMENT_DELAY c_matrix_top_4_0_D_IN;
	if (c_matrix_top_4_1_EN)
	  c_matrix_top_4_1 <= `BSV_ASSIGNMENT_DELAY c_matrix_top_4_1_D_IN;
	if (c_matrix_top_4_2_EN)
	  c_matrix_top_4_2 <= `BSV_ASSIGNMENT_DELAY c_matrix_top_4_2_D_IN;
	if (c_matrix_top_4_3_EN)
	  c_matrix_top_4_3 <= `BSV_ASSIGNMENT_DELAY c_matrix_top_4_3_D_IN;
	if (c_matrix_top_5_0_EN)
	  c_matrix_top_5_0 <= `BSV_ASSIGNMENT_DELAY c_matrix_top_5_0_D_IN;
	if (c_matrix_top_5_1_EN)
	  c_matrix_top_5_1 <= `BSV_ASSIGNMENT_DELAY c_matrix_top_5_1_D_IN;
	if (c_matrix_top_5_2_EN)
	  c_matrix_top_5_2 <= `BSV_ASSIGNMENT_DELAY c_matrix_top_5_2_D_IN;
	if (c_matrix_top_5_3_EN)
	  c_matrix_top_5_3 <= `BSV_ASSIGNMENT_DELAY c_matrix_top_5_3_D_IN;
	if (c_matrix_top_6_0_EN)
	  c_matrix_top_6_0 <= `BSV_ASSIGNMENT_DELAY c_matrix_top_6_0_D_IN;
	if (c_matrix_top_6_1_EN)
	  c_matrix_top_6_1 <= `BSV_ASSIGNMENT_DELAY c_matrix_top_6_1_D_IN;
	if (c_matrix_top_6_2_EN)
	  c_matrix_top_6_2 <= `BSV_ASSIGNMENT_DELAY c_matrix_top_6_2_D_IN;
	if (c_matrix_top_6_3_EN)
	  c_matrix_top_6_3 <= `BSV_ASSIGNMENT_DELAY c_matrix_top_6_3_D_IN;
	if (counter_EN) counter <= `BSV_ASSIGNMENT_DELAY counter_D_IN;
	if (s1_or_s2_systolic_EN)
	  s1_or_s2_systolic <= `BSV_ASSIGNMENT_DELAY s1_or_s2_systolic_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    a_matrix_top_0_0 = 16'hAAAA;
    a_matrix_top_0_1 = 16'hAAAA;
    a_matrix_top_0_2 = 16'hAAAA;
    a_matrix_top_0_3 = 16'hAAAA;
    a_matrix_top_1_0 = 16'hAAAA;
    a_matrix_top_1_1 = 16'hAAAA;
    a_matrix_top_1_2 = 16'hAAAA;
    a_matrix_top_1_3 = 16'hAAAA;
    a_matrix_top_2_0 = 16'hAAAA;
    a_matrix_top_2_1 = 16'hAAAA;
    a_matrix_top_2_2 = 16'hAAAA;
    a_matrix_top_2_3 = 16'hAAAA;
    a_matrix_top_3_0 = 16'hAAAA;
    a_matrix_top_3_1 = 16'hAAAA;
    a_matrix_top_3_2 = 16'hAAAA;
    a_matrix_top_3_3 = 16'hAAAA;
    a_matrix_top_4_0 = 16'hAAAA;
    a_matrix_top_4_1 = 16'hAAAA;
    a_matrix_top_4_2 = 16'hAAAA;
    a_matrix_top_4_3 = 16'hAAAA;
    a_matrix_top_5_0 = 16'hAAAA;
    a_matrix_top_5_1 = 16'hAAAA;
    a_matrix_top_5_2 = 16'hAAAA;
    a_matrix_top_5_3 = 16'hAAAA;
    a_matrix_top_6_0 = 16'hAAAA;
    a_matrix_top_6_1 = 16'hAAAA;
    a_matrix_top_6_2 = 16'hAAAA;
    a_matrix_top_6_3 = 16'hAAAA;
    b_matrix_top_0_0 = 16'hAAAA;
    b_matrix_top_0_1 = 16'hAAAA;
    b_matrix_top_0_2 = 16'hAAAA;
    b_matrix_top_0_3 = 16'hAAAA;
    b_matrix_top_1_0 = 16'hAAAA;
    b_matrix_top_1_1 = 16'hAAAA;
    b_matrix_top_1_2 = 16'hAAAA;
    b_matrix_top_1_3 = 16'hAAAA;
    b_matrix_top_2_0 = 16'hAAAA;
    b_matrix_top_2_1 = 16'hAAAA;
    b_matrix_top_2_2 = 16'hAAAA;
    b_matrix_top_2_3 = 16'hAAAA;
    b_matrix_top_3_0 = 16'hAAAA;
    b_matrix_top_3_1 = 16'hAAAA;
    b_matrix_top_3_2 = 16'hAAAA;
    b_matrix_top_3_3 = 16'hAAAA;
    c_matrix_top_0_0 = 32'hAAAAAAAA;
    c_matrix_top_0_1 = 32'hAAAAAAAA;
    c_matrix_top_0_2 = 32'hAAAAAAAA;
    c_matrix_top_0_3 = 32'hAAAAAAAA;
    c_matrix_top_1_0 = 32'hAAAAAAAA;
    c_matrix_top_1_1 = 32'hAAAAAAAA;
    c_matrix_top_1_2 = 32'hAAAAAAAA;
    c_matrix_top_1_3 = 32'hAAAAAAAA;
    c_matrix_top_2_0 = 32'hAAAAAAAA;
    c_matrix_top_2_1 = 32'hAAAAAAAA;
    c_matrix_top_2_2 = 32'hAAAAAAAA;
    c_matrix_top_2_3 = 32'hAAAAAAAA;
    c_matrix_top_3_0 = 32'hAAAAAAAA;
    c_matrix_top_3_1 = 32'hAAAAAAAA;
    c_matrix_top_3_2 = 32'hAAAAAAAA;
    c_matrix_top_3_3 = 32'hAAAAAAAA;
    c_matrix_top_4_0 = 32'hAAAAAAAA;
    c_matrix_top_4_1 = 32'hAAAAAAAA;
    c_matrix_top_4_2 = 32'hAAAAAAAA;
    c_matrix_top_4_3 = 32'hAAAAAAAA;
    c_matrix_top_5_0 = 32'hAAAAAAAA;
    c_matrix_top_5_1 = 32'hAAAAAAAA;
    c_matrix_top_5_2 = 32'hAAAAAAAA;
    c_matrix_top_5_3 = 32'hAAAAAAAA;
    c_matrix_top_6_0 = 32'hAAAAAAAA;
    c_matrix_top_6_1 = 32'hAAAAAAAA;
    c_matrix_top_6_2 = 32'hAAAAAAAA;
    c_matrix_top_6_3 = 32'hAAAAAAAA;
    counter = 32'hAAAAAAAA;
    s1_or_s2_systolic = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkTopSystolic

