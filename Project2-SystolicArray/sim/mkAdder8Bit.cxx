/*
 * Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
 * 
 * On Tue Oct 22 19:27:12 IST 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkAdder8Bit.h"


/* Constructor */
MOD_mkAdder8Bit::MOD_mkAdder8Bit(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent), __clk_handle_0(BAD_CLOCK_HANDLE), PORT_RST_N((tUInt8)1u)
{
  symbol_count = 0u;
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkAdder8Bit::init_symbols_0()
{
}


/* Rule actions */


/* Methods */

tUInt32 MOD_mkAdder8Bit::METH_add(tUInt8 ARG_add_x, tUInt8 ARG_add_y, tUInt8 ARG_add_add_or_sub)
{
  tUInt8 DEF_add_x_BIT_7_6_XOR_IF_add_add_or_sub_THEN_INV_a_ETC___d82;
  tUInt8 DEF_y__h657;
  tUInt8 DEF_y__h806;
  tUInt8 DEF_x__h805;
  tUInt8 DEF_y__h804;
  tUInt8 DEF_x__h803;
  tUInt8 DEF_y__h953;
  tUInt8 DEF_x__h952;
  tUInt8 DEF_y__h951;
  tUInt8 DEF_x__h950;
  tUInt8 DEF_y__h1100;
  tUInt8 DEF_x__h1099;
  tUInt8 DEF_y__h1098;
  tUInt8 DEF_x__h1097;
  tUInt8 DEF_y__h1247;
  tUInt8 DEF_x__h1246;
  tUInt8 DEF_y__h1245;
  tUInt8 DEF_x__h1244;
  tUInt8 DEF_y__h1394;
  tUInt8 DEF_x__h1393;
  tUInt8 DEF_y__h1392;
  tUInt8 DEF_x__h1391;
  tUInt8 DEF_y__h388;
  tUInt8 DEF_x__h387;
  tUInt8 DEF_y__h386;
  tUInt8 DEF_x__h385;
  tUInt8 DEF_y__h511;
  tUInt8 DEF_x__h510;
  tUInt8 DEF_y__h509;
  tUInt8 DEF_x__h508;
  tUInt8 DEF_y__h659;
  tUInt8 DEF_x__h658;
  tUInt8 DEF_x__h656;
  tUInt8 DEF_c_in__h1375;
  tUInt8 DEF_x__h1469;
  tUInt8 DEF_c_in__h1228;
  tUInt8 DEF_x__h1322;
  tUInt8 DEF_c_in__h1081;
  tUInt8 DEF_x__h1175;
  tUInt8 DEF_c_in__h934;
  tUInt8 DEF_x__h1028;
  tUInt8 DEF_c_in__h787;
  tUInt8 DEF_x__h881;
  tUInt8 DEF_c_in__h640;
  tUInt8 DEF_x__h734;
  tUInt8 DEF_x__h587;
  tUInt8 DEF_x__h443;
  tUInt8 DEF_x__h368;
  tUInt8 DEF_x__h490;
  tUInt8 DEF_x__h638;
  tUInt8 DEF_x__h785;
  tUInt8 DEF_x__h932;
  tUInt8 DEF_x__h1079;
  tUInt8 DEF_x__h1226;
  tUInt8 DEF_x__h1373;
  tUInt8 DEF_y__h369;
  tUInt8 DEF_y__h491;
  tUInt8 DEF_y__h639;
  tUInt8 DEF_y__h786;
  tUInt8 DEF_y__h933;
  tUInt8 DEF_y__h1080;
  tUInt8 DEF_y__h1227;
  tUInt8 DEF_y__h1374;
  tUInt8 DEF_c_in__h492;
  tUInt8 DEF_carry_out__h43;
  tUInt8 DEF_IF_add_add_or_sub_THEN_INV_add_y_ELSE_add_y___d2;
  tUInt32 PORT_add;
  DEF_IF_add_add_or_sub_THEN_INV_add_y_ELSE_add_y___d2 = ARG_add_add_or_sub ? (tUInt8)255u & ~ARG_add_y : ARG_add_y;
  DEF_y__h1374 = (tUInt8)(DEF_IF_add_add_or_sub_THEN_INV_add_y_ELSE_add_y___d2 >> 7u);
  DEF_y__h1227 = (tUInt8)((tUInt8)1u & (DEF_IF_add_add_or_sub_THEN_INV_add_y_ELSE_add_y___d2 >> 6u));
  DEF_y__h1080 = (tUInt8)((tUInt8)1u & (DEF_IF_add_add_or_sub_THEN_INV_add_y_ELSE_add_y___d2 >> 5u));
  DEF_y__h933 = (tUInt8)((tUInt8)1u & (DEF_IF_add_add_or_sub_THEN_INV_add_y_ELSE_add_y___d2 >> 4u));
  DEF_y__h786 = (tUInt8)((tUInt8)1u & (DEF_IF_add_add_or_sub_THEN_INV_add_y_ELSE_add_y___d2 >> 3u));
  DEF_y__h639 = (tUInt8)((tUInt8)1u & (DEF_IF_add_add_or_sub_THEN_INV_add_y_ELSE_add_y___d2 >> 2u));
  DEF_y__h491 = (tUInt8)((tUInt8)1u & (DEF_IF_add_add_or_sub_THEN_INV_add_y_ELSE_add_y___d2 >> 1u));
  DEF_x__h1226 = (tUInt8)((tUInt8)1u & (ARG_add_x >> 6u));
  DEF_y__h369 = (tUInt8)((tUInt8)1u & DEF_IF_add_add_or_sub_THEN_INV_add_y_ELSE_add_y___d2);
  DEF_x__h1373 = (tUInt8)(ARG_add_x >> 7u);
  DEF_x__h1079 = (tUInt8)((tUInt8)1u & (ARG_add_x >> 5u));
  DEF_x__h932 = (tUInt8)((tUInt8)1u & (ARG_add_x >> 4u));
  DEF_x__h785 = (tUInt8)((tUInt8)1u & (ARG_add_x >> 3u));
  DEF_x__h638 = (tUInt8)((tUInt8)1u & (ARG_add_x >> 2u));
  DEF_x__h490 = (tUInt8)((tUInt8)1u & (ARG_add_x >> 1u));
  DEF_x__h368 = (tUInt8)((tUInt8)1u & ARG_add_x);
  DEF_x__h443 = DEF_x__h368 ^ DEF_y__h369;
  DEF_x__h587 = DEF_x__h490 ^ DEF_y__h491;
  DEF_x__h734 = DEF_x__h638 ^ DEF_y__h639;
  DEF_x__h881 = DEF_x__h785 ^ DEF_y__h786;
  DEF_x__h1175 = DEF_x__h1079 ^ DEF_y__h1080;
  DEF_x__h1028 = DEF_x__h932 ^ DEF_y__h933;
  DEF_x__h1322 = DEF_x__h1226 ^ DEF_y__h1227;
  DEF_x__h1469 = DEF_x__h1373 ^ DEF_y__h1374;
  DEF_y__h659 = DEF_x__h638 & DEF_y__h639;
  DEF_y__h511 = DEF_x__h490 & DEF_y__h491;
  DEF_y__h386 = DEF_x__h368 & ARG_add_add_or_sub;
  DEF_x__h387 = DEF_y__h369 & ARG_add_add_or_sub;
  DEF_y__h388 = DEF_x__h368 & DEF_y__h369;
  DEF_x__h385 = DEF_x__h387 | DEF_y__h388;
  DEF_c_in__h492 = (tUInt8)((tUInt8)1u & (DEF_x__h385 | DEF_y__h386 ? (tUInt8)1u : (tUInt8)0u));
  DEF_y__h509 = DEF_x__h490 & DEF_c_in__h492;
  DEF_x__h510 = DEF_y__h491 & DEF_c_in__h492;
  DEF_x__h508 = DEF_x__h510 | DEF_y__h511;
  DEF_c_in__h640 = DEF_x__h508 | DEF_y__h509;
  DEF_x__h658 = DEF_y__h639 & DEF_c_in__h640;
  DEF_x__h656 = DEF_x__h658 | DEF_y__h659;
  DEF_y__h1394 = DEF_x__h1373 & DEF_y__h1374;
  DEF_y__h1247 = DEF_x__h1226 & DEF_y__h1227;
  DEF_y__h1100 = DEF_x__h1079 & DEF_y__h1080;
  DEF_y__h953 = DEF_x__h932 & DEF_y__h933;
  DEF_y__h806 = DEF_x__h785 & DEF_y__h786;
  DEF_y__h657 = DEF_x__h638 & DEF_c_in__h640;
  DEF_c_in__h787 = DEF_x__h656 | DEF_y__h657;
  DEF_y__h804 = DEF_x__h785 & DEF_c_in__h787;
  DEF_x__h805 = DEF_y__h786 & DEF_c_in__h787;
  DEF_x__h803 = DEF_x__h805 | DEF_y__h806;
  DEF_c_in__h934 = DEF_x__h803 | DEF_y__h804;
  DEF_y__h951 = DEF_x__h932 & DEF_c_in__h934;
  DEF_x__h952 = DEF_y__h933 & DEF_c_in__h934;
  DEF_x__h950 = DEF_x__h952 | DEF_y__h953;
  DEF_c_in__h1081 = DEF_x__h950 | DEF_y__h951;
  DEF_y__h1098 = DEF_x__h1079 & DEF_c_in__h1081;
  DEF_x__h1099 = DEF_y__h1080 & DEF_c_in__h1081;
  DEF_x__h1097 = DEF_x__h1099 | DEF_y__h1100;
  DEF_c_in__h1228 = DEF_x__h1097 | DEF_y__h1098;
  DEF_y__h1245 = DEF_x__h1226 & DEF_c_in__h1228;
  DEF_x__h1246 = DEF_y__h1227 & DEF_c_in__h1228;
  DEF_x__h1244 = DEF_x__h1246 | DEF_y__h1247;
  DEF_c_in__h1375 = DEF_x__h1244 | DEF_y__h1245;
  DEF_y__h1392 = DEF_x__h1373 & DEF_c_in__h1375;
  DEF_x__h1393 = DEF_y__h1374 & DEF_c_in__h1375;
  DEF_x__h1391 = DEF_x__h1393 | DEF_y__h1394;
  DEF_carry_out__h43 = DEF_x__h1391 | DEF_y__h1392;
  DEF_add_x_BIT_7_6_XOR_IF_add_add_or_sub_THEN_INV_a_ETC___d82 = (tUInt8)255u & (((((((((DEF_x__h1469 ^ DEF_c_in__h1375) << 7u) | ((DEF_x__h1322 ^ DEF_c_in__h1228) << 6u)) | ((DEF_x__h1175 ^ DEF_c_in__h1081) << 5u)) | ((DEF_x__h1028 ^ DEF_c_in__h934) << 4u)) | ((DEF_x__h881 ^ DEF_c_in__h787) << 3u)) | ((DEF_x__h734 ^ DEF_c_in__h640) << 2u)) | ((DEF_x__h587 ^ DEF_c_in__h492) << 1u)) | (tUInt8)((tUInt8)1u & (DEF_x__h443 ^ ARG_add_add_or_sub ? (tUInt8)1u : (tUInt8)0u)));
  PORT_add = 511u & ((((tUInt32)(DEF_carry_out__h43)) << 8u) | (tUInt32)(DEF_add_x_BIT_7_6_XOR_IF_add_add_or_sub_THEN_INV_a_ETC___d82));
  return PORT_add;
}

tUInt8 MOD_mkAdder8Bit::METH_RDY_add()
{
  tUInt8 DEF_CAN_FIRE_add;
  tUInt8 PORT_RDY_add;
  DEF_CAN_FIRE_add = (tUInt8)1u;
  PORT_RDY_add = DEF_CAN_FIRE_add;
  return PORT_RDY_add;
}


/* Reset routines */

void MOD_mkAdder8Bit::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkAdder8Bit::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkAdder8Bit::dump_state(unsigned int indent)
{
}


/* VCD dumping routines */

unsigned int MOD_mkAdder8Bit::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 1u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkAdder8Bit::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkAdder8Bit &backing)
{
  vcd_defs(dt, backing);
}

void MOD_mkAdder8Bit::vcd_defs(tVCDDumpType dt, MOD_mkAdder8Bit &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
    }
}
