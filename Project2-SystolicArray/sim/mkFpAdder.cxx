/*
 * Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
 * 
 * On Sun Oct 20 23:47:55 IST 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkFpAdder.h"


/* String declarations */
static std::string const __str_literal_4("add_or_sub = %32b", 17u);
static std::string const __str_literal_13("add_result = %32b", 17u);
static std::string const __str_literal_5("exp1 = %32b", 11u);
static std::string const __str_literal_6("exp2 = %32b", 11u);
static std::string const __str_literal_9("exp_diff = %0d", 14u);
static std::string const __str_literal_11("intermediate_add_mantissa = %32b", 32u);
static std::string const __str_literal_10("intermediate_mantissa2 = %32b", 29u);
static std::string const __str_literal_12("intermediate_sub_mantissa = %32b", 32u);
static std::string const __str_literal_7("mantissa1 = %32b", 16u);
static std::string const __str_literal_8("mantissa2 = %32b", 16u);
static std::string const __str_literal_1("op1 = %32b", 10u);
static std::string const __str_literal_2("op2 = %32b", 10u);
static std::string const __str_literal_15("output_result = %32b", 20u);
static std::string const __str_literal_3("output_sign = %32b", 18u);
static std::string const __str_literal_14("sub_result = %32b", 17u);


/* Constructor */
MOD_mkFpAdder::MOD_mkFpAdder(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent), __clk_handle_0(BAD_CLOCK_HANDLE), PORT_RST_N((tUInt8)1u)
{
  symbol_count = 0u;
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkFpAdder::init_symbols_0()
{
}


/* Rule actions */


/* Methods */

tUInt32 MOD_mkFpAdder::METH_fp_add(tUInt32 ARG_fp_add_a, tUInt32 ARG_fp_add_b)
{
  tUInt32 DEF_mantissa1__h400;
  tUInt32 DEF_sub_result__h732;
  tUInt32 DEF_add_result__h691;
  tUInt32 DEF_output_result__h1249;
  tUInt32 DEF__0_CONCAT_NOT_IF_fp_add_a_BITS_30_TO_0_ULE_fp_a_ETC___d22;
  tUInt32 DEF__0_CONCAT_NOT_IF_fp_add_a_BITS_30_TO_0_ULE_fp_a_ETC___d21;
  tUInt8 DEF_exponent_diff__h566;
  tUInt32 DEF_mantissa2__h401;
  tUInt32 DEF_intermediate_mantissa2__h598;
  tUInt32 DEF_IF_0_CONCAT_NOT_IF_fp_add_a_BITS_30_TO_0_ULE_f_ETC___d31;
  tUInt32 DEF_IF_0_CONCAT_NOT_IF_fp_add_a_BITS_30_TO_0_ULE_f_ETC___d39;
  tUInt8 DEF_add_or_sub__h222;
  tUInt8 DEF_fp_add_a_BITS_30_TO_0_ULE_fp_add_b_BITS_30_TO_0___d3;
  tUInt8 DEF_IF_fp_add_a_BITS_30_TO_0_ULE_fp_add_b_BITS_30__ETC___d6;
  tUInt8 DEF_exponent2__h297;
  tUInt8 DEF_exponent1__h296;
  tUInt32 DEF_intermediate_add_mantissa__h651;
  tUInt32 DEF_intermediate_sub_mantissa__h692;
  tUInt32 DEF_IF_fp_add_a_BITS_30_TO_0_ULE_fp_add_b_BITS_30__ETC___d5;
  tUInt32 DEF_IF_fp_add_a_BITS_30_TO_0_ULE_fp_add_b_BITS_30__ETC___d4;
  tUInt32 PORT_fp_add;
  DEF_fp_add_a_BITS_30_TO_0_ULE_fp_add_b_BITS_30_TO_0___d3 = ((tUInt32)(2147483647u & ARG_fp_add_a)) <= ((tUInt32)(2147483647u & ARG_fp_add_b));
  DEF_IF_fp_add_a_BITS_30_TO_0_ULE_fp_add_b_BITS_30__ETC___d4 = DEF_fp_add_a_BITS_30_TO_0_ULE_fp_add_b_BITS_30_TO_0___d3 ? ARG_fp_add_b : ARG_fp_add_a;
  DEF_IF_fp_add_a_BITS_30_TO_0_ULE_fp_add_b_BITS_30__ETC___d5 = DEF_fp_add_a_BITS_30_TO_0_ULE_fp_add_b_BITS_30_TO_0___d3 ? ARG_fp_add_a : ARG_fp_add_b;
  DEF_exponent1__h296 = (tUInt8)((tUInt8)255u & (DEF_IF_fp_add_a_BITS_30_TO_0_ULE_fp_add_b_BITS_30__ETC___d4 >> 23u));
  DEF_exponent2__h297 = (tUInt8)((tUInt8)255u & (DEF_IF_fp_add_a_BITS_30_TO_0_ULE_fp_add_b_BITS_30__ETC___d5 >> 23u));
  DEF_IF_fp_add_a_BITS_30_TO_0_ULE_fp_add_b_BITS_30__ETC___d6 = (tUInt8)(DEF_IF_fp_add_a_BITS_30_TO_0_ULE_fp_add_b_BITS_30__ETC___d4 >> 31u);
  DEF_add_or_sub__h222 = DEF_IF_fp_add_a_BITS_30_TO_0_ULE_fp_add_b_BITS_30__ETC___d6 ^ ((tUInt8)(DEF_IF_fp_add_a_BITS_30_TO_0_ULE_fp_add_b_BITS_30__ETC___d5 >> 31u));
  DEF_mantissa2__h401 = 16777215u & ((((tUInt32)(!(DEF_exponent2__h297 == (tUInt8)0u))) << 23u) | (tUInt32)(8388607u & DEF_IF_fp_add_a_BITS_30_TO_0_ULE_fp_add_b_BITS_30__ETC___d5));
  DEF_exponent_diff__h566 = (tUInt8)255u & (DEF_exponent1__h296 - DEF_exponent2__h297);
  DEF_intermediate_mantissa2__h598 = primShiftR32(24u,
						  24u,
						  (tUInt32)(DEF_mantissa2__h401),
						  8u,
						  (tUInt8)(DEF_exponent_diff__h566));
  DEF__0_CONCAT_NOT_IF_fp_add_a_BITS_30_TO_0_ULE_fp_a_ETC___d22 = 33554431u & ((((tUInt32)((tUInt8)0u)) << 24u) | DEF_intermediate_mantissa2__h598);
  DEF_mantissa1__h400 = 16777215u & ((((tUInt32)(!(DEF_exponent1__h296 == (tUInt8)0u))) << 23u) | (tUInt32)(8388607u & DEF_IF_fp_add_a_BITS_30_TO_0_ULE_fp_add_b_BITS_30__ETC___d4));
  DEF__0_CONCAT_NOT_IF_fp_add_a_BITS_30_TO_0_ULE_fp_a_ETC___d21 = 33554431u & ((((tUInt32)((tUInt8)0u)) << 24u) | DEF_mantissa1__h400);
  DEF_intermediate_sub_mantissa__h692 = 33554431u & (DEF__0_CONCAT_NOT_IF_fp_add_a_BITS_30_TO_0_ULE_fp_a_ETC___d21 - DEF__0_CONCAT_NOT_IF_fp_add_a_BITS_30_TO_0_ULE_fp_a_ETC___d22);
  DEF_intermediate_add_mantissa__h651 = 33554431u & (DEF__0_CONCAT_NOT_IF_fp_add_a_BITS_30_TO_0_ULE_fp_a_ETC___d21 + DEF__0_CONCAT_NOT_IF_fp_add_a_BITS_30_TO_0_ULE_fp_a_ETC___d22);
  DEF_IF_0_CONCAT_NOT_IF_fp_add_a_BITS_30_TO_0_ULE_f_ETC___d39 = (tUInt8)((tUInt8)1u & (DEF_intermediate_sub_mantissa__h692 >> 23u)) ? 2147483647u & ((((tUInt32)(DEF_exponent1__h296)) << 23u) | (tUInt32)(8388607u & DEF_intermediate_sub_mantissa__h692)) : 2147483647u & (((((tUInt32)((tUInt8)255u & (DEF_exponent1__h296 - (tUInt8)1u))) << 23u) | (((tUInt32)(4194303u & DEF_intermediate_sub_mantissa__h692)) << 1u)) | (tUInt32)((tUInt8)0u));
  DEF_IF_0_CONCAT_NOT_IF_fp_add_a_BITS_30_TO_0_ULE_f_ETC___d31 = (tUInt8)(DEF_intermediate_add_mantissa__h651 >> 24u) ? 2147483647u & ((((tUInt32)((tUInt8)255u & ((tUInt8)1u + DEF_exponent1__h296))) << 23u) | (tUInt32)(8388607u & (DEF_intermediate_add_mantissa__h651 >> 1u))) : 2147483647u & ((((tUInt32)(DEF_exponent1__h296)) << 23u) | (tUInt32)(8388607u & DEF_intermediate_add_mantissa__h651));
  DEF_output_result__h1249 = (((tUInt32)(DEF_IF_fp_add_a_BITS_30_TO_0_ULE_fp_add_b_BITS_30__ETC___d6)) << 31u) | (DEF_add_or_sub__h222 ? DEF_IF_0_CONCAT_NOT_IF_fp_add_a_BITS_30_TO_0_ULE_f_ETC___d39 : DEF_IF_0_CONCAT_NOT_IF_fp_add_a_BITS_30_TO_0_ULE_f_ETC___d31);
  PORT_fp_add = DEF_output_result__h1249;
  DEF_add_result__h691 = (((tUInt32)(DEF_IF_fp_add_a_BITS_30_TO_0_ULE_fp_add_b_BITS_30__ETC___d6)) << 31u) | DEF_IF_0_CONCAT_NOT_IF_fp_add_a_BITS_30_TO_0_ULE_f_ETC___d31;
  DEF_sub_result__h732 = (((tUInt32)(DEF_IF_fp_add_a_BITS_30_TO_0_ULE_fp_add_b_BITS_30__ETC___d6)) << 31u) | DEF_IF_0_CONCAT_NOT_IF_fp_add_a_BITS_30_TO_0_ULE_f_ETC___d39;
  dollar_display(sim_hdl,
		 this,
		 "s,32",
		 &__str_literal_1,
		 DEF_IF_fp_add_a_BITS_30_TO_0_ULE_fp_add_b_BITS_30__ETC___d4);
  dollar_display(sim_hdl,
		 this,
		 "s,32",
		 &__str_literal_2,
		 DEF_IF_fp_add_a_BITS_30_TO_0_ULE_fp_add_b_BITS_30__ETC___d5);
  dollar_display(sim_hdl,
		 this,
		 "s,1",
		 &__str_literal_3,
		 DEF_IF_fp_add_a_BITS_30_TO_0_ULE_fp_add_b_BITS_30__ETC___d6);
  dollar_display(sim_hdl, this, "s,1", &__str_literal_4, DEF_add_or_sub__h222);
  dollar_display(sim_hdl, this, "s,8", &__str_literal_5, DEF_exponent1__h296);
  dollar_display(sim_hdl, this, "s,8", &__str_literal_6, DEF_exponent2__h297);
  dollar_display(sim_hdl, this, "s,24", &__str_literal_7, DEF_mantissa1__h400);
  dollar_display(sim_hdl, this, "s,24", &__str_literal_8, DEF_mantissa2__h401);
  dollar_display(sim_hdl, this, "s,8", &__str_literal_9, DEF_exponent_diff__h566);
  dollar_display(sim_hdl, this, "s,24", &__str_literal_10, DEF_intermediate_mantissa2__h598);
  dollar_display(sim_hdl, this, "s,25", &__str_literal_11, DEF_intermediate_add_mantissa__h651);
  dollar_display(sim_hdl, this, "s,25", &__str_literal_12, DEF_intermediate_sub_mantissa__h692);
  dollar_display(sim_hdl, this, "s,32", &__str_literal_13, DEF_add_result__h691);
  dollar_display(sim_hdl, this, "s,32", &__str_literal_14, DEF_sub_result__h732);
  dollar_display(sim_hdl, this, "s,32", &__str_literal_15, DEF_output_result__h1249);
  return PORT_fp_add;
}

tUInt8 MOD_mkFpAdder::METH_RDY_fp_add()
{
  tUInt8 DEF_CAN_FIRE_fp_add;
  tUInt8 PORT_RDY_fp_add;
  DEF_CAN_FIRE_fp_add = (tUInt8)1u;
  PORT_RDY_fp_add = DEF_CAN_FIRE_fp_add;
  return PORT_RDY_fp_add;
}


/* Reset routines */

void MOD_mkFpAdder::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkFpAdder::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkFpAdder::dump_state(unsigned int indent)
{
}


/* VCD dumping routines */

unsigned int MOD_mkFpAdder::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 1u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkFpAdder::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkFpAdder &backing)
{
  vcd_defs(dt, backing);
}

void MOD_mkFpAdder::vcd_defs(tVCDDumpType dt, MOD_mkFpAdder &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
    }
}
