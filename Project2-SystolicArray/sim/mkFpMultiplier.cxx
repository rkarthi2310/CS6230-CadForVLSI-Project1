/*
 * Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
 * 
 * On Tue Oct 22 19:30:12 IST 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkFpMultiplier.h"


/* String declarations */
static std::string const __str_literal_4("exp1 = %32b", 11u);
static std::string const __str_literal_5("exp2 = %32b", 11u);
static std::string const __str_literal_8("intermediate_mul_mantissa = %32b", 32u);
static std::string const __str_literal_6("mantissa1 = %32b", 16u);
static std::string const __str_literal_7("mantissa2 = %32b", 16u);
static std::string const __str_literal_12("mul_result = %32b", 17u);
static std::string const __str_literal_9("normalised = %32b", 17u);
static std::string const __str_literal_1("op1 = %32b", 10u);
static std::string const __str_literal_2("op2 = %32b", 10u);
static std::string const __str_literal_10("output exponent = %32b", 22u);
static std::string const __str_literal_11("output_mantissa = %32b", 22u);
static std::string const __str_literal_3("output_sign = %32b", 18u);


/* Constructor */
MOD_mkFpMultiplier::MOD_mkFpMultiplier(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_ifc_adder8_1(simHdl, "ifc_adder8_1", this),
    INST_ifc_adder8_2(simHdl, "ifc_adder8_2", this),
    INST_ifc_adder8_3(simHdl, "ifc_adder8_3", this),
    INST_ifc_multiplier8(simHdl, "ifc_multiplier8", this),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 4u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkFpMultiplier::init_symbols_0()
{
  init_symbol(&symbols[0u], "ifc_adder8_1", SYM_MODULE, &INST_ifc_adder8_1);
  init_symbol(&symbols[1u], "ifc_adder8_2", SYM_MODULE, &INST_ifc_adder8_2);
  init_symbol(&symbols[2u], "ifc_adder8_3", SYM_MODULE, &INST_ifc_adder8_3);
  init_symbol(&symbols[3u], "ifc_multiplier8", SYM_MODULE, &INST_ifc_multiplier8);
}


/* Rule actions */


/* Methods */

tUInt32 MOD_mkFpMultiplier::METH_fp_mul(tUInt32 ARG_fp_mul_a, tUInt32 ARG_fp_mul_b)
{
  tUInt8 DEF_mantissa2__h499;
  tUInt8 DEF_mantissa1__h498;
  tUInt8 DEF_y__h861;
  tUInt32 DEF_output_mantissa__h954;
  tUInt32 DEF_mul_result__h1013;
  tUInt8 DEF_output_sign__h308;
  tUInt8 DEF_normalised__h718;
  tUInt8 DEF_exponent1__h396;
  tUInt8 DEF_exponent2__h397;
  tUInt8 DEF_x__h860;
  tUInt8 DEF_x__h812;
  tUInt8 DEF_output_exponent__h902;
  tUInt32 DEF_x__h984;
  tUInt32 DEF_ifc_multiplier8_mul___d14;
  tUInt32 PORT_fp_mul;
  tUInt32 DEF_AVMeth_ifc_multiplier8_mul;
  tUInt32 DEF_AVMeth_ifc_adder8_3_add;
  tUInt32 DEF_AVMeth_ifc_adder8_1_add;
  tUInt32 DEF_AVMeth_ifc_adder8_2_add;
  DEF_exponent2__h397 = (tUInt8)((tUInt8)255u & (ARG_fp_mul_b >> 7u));
  DEF_exponent1__h396 = (tUInt8)((tUInt8)255u & (ARG_fp_mul_a >> 7u));
  DEF_output_sign__h308 = ((tUInt8)(ARG_fp_mul_a >> 15u)) ^ ((tUInt8)(ARG_fp_mul_b >> 15u));
  DEF_mantissa1__h498 = (tUInt8)255u & ((!(DEF_exponent1__h396 == (tUInt8)0u) << 7u) | (tUInt8)((tUInt8)127u & ARG_fp_mul_a));
  DEF_mantissa2__h499 = (tUInt8)255u & ((!(DEF_exponent2__h397 == (tUInt8)0u) << 7u) | (tUInt8)((tUInt8)127u & ARG_fp_mul_b));
  dollar_display(sim_hdl, this, "s,16", &__str_literal_1, ARG_fp_mul_a);
  dollar_display(sim_hdl, this, "s,16", &__str_literal_2, ARG_fp_mul_b);
  dollar_display(sim_hdl, this, "s,1", &__str_literal_3, DEF_output_sign__h308);
  dollar_display(sim_hdl, this, "s,8", &__str_literal_4, DEF_exponent1__h396);
  dollar_display(sim_hdl, this, "s,8", &__str_literal_5, DEF_exponent2__h397);
  dollar_display(sim_hdl, this, "s,8", &__str_literal_6, DEF_mantissa1__h498);
  dollar_display(sim_hdl, this, "s,8", &__str_literal_7, DEF_mantissa2__h499);
  DEF_AVMeth_ifc_multiplier8_mul = INST_ifc_multiplier8.METH_mul(DEF_mantissa1__h498,
								 DEF_mantissa2__h499);
  DEF_ifc_multiplier8_mul___d14 = DEF_AVMeth_ifc_multiplier8_mul;
  DEF_x__h984 = (tUInt32)(16383u & DEF_ifc_multiplier8_mul___d14);
  DEF_normalised__h718 = (tUInt8)(DEF_ifc_multiplier8_mul___d14 >> 15u);
  DEF_output_mantissa__h954 = 8388607u & (DEF_x__h984 << 9u);
  DEF_y__h861 = (tUInt8)255u & DEF_normalised__h718;
  dollar_display(sim_hdl, this, "s,16", &__str_literal_8, DEF_ifc_multiplier8_mul___d14);
  dollar_display(sim_hdl, this, "s,1", &__str_literal_9, DEF_normalised__h718);
  DEF_AVMeth_ifc_adder8_1_add = INST_ifc_adder8_1.METH_add(DEF_exponent1__h396,
							   DEF_exponent2__h397,
							   (tUInt8)0u);
  DEF_x__h812 = (tUInt8)((tUInt8)255u & DEF_AVMeth_ifc_adder8_1_add);
  DEF_AVMeth_ifc_adder8_2_add = INST_ifc_adder8_2.METH_add(DEF_x__h812, (tUInt8)127u, (tUInt8)1u);
  DEF_x__h860 = (tUInt8)((tUInt8)255u & DEF_AVMeth_ifc_adder8_2_add);
  DEF_AVMeth_ifc_adder8_3_add = INST_ifc_adder8_3.METH_add(DEF_x__h860, DEF_y__h861, (tUInt8)0u);
  DEF_output_exponent__h902 = (tUInt8)((tUInt8)255u & DEF_AVMeth_ifc_adder8_3_add);
  DEF_mul_result__h1013 = ((((tUInt32)(DEF_output_sign__h308)) << 31u) | (((tUInt32)(DEF_output_exponent__h902)) << 23u)) | DEF_output_mantissa__h954;
  PORT_fp_mul = DEF_mul_result__h1013;
  dollar_display(sim_hdl, this, "s,8", &__str_literal_10, DEF_output_exponent__h902);
  dollar_display(sim_hdl, this, "s,23", &__str_literal_11, DEF_output_mantissa__h954);
  dollar_display(sim_hdl, this, "s,32", &__str_literal_12, DEF_mul_result__h1013);
  return PORT_fp_mul;
}

tUInt8 MOD_mkFpMultiplier::METH_RDY_fp_mul()
{
  tUInt8 DEF_CAN_FIRE_fp_mul;
  tUInt8 PORT_RDY_fp_mul;
  DEF_CAN_FIRE_fp_mul = (tUInt8)1u;
  PORT_RDY_fp_mul = DEF_CAN_FIRE_fp_mul;
  return PORT_RDY_fp_mul;
}


/* Reset routines */

void MOD_mkFpMultiplier::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_ifc_multiplier8.reset_RST_N(ARG_rst_in);
  INST_ifc_adder8_3.reset_RST_N(ARG_rst_in);
  INST_ifc_adder8_2.reset_RST_N(ARG_rst_in);
  INST_ifc_adder8_1.reset_RST_N(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkFpMultiplier::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkFpMultiplier::dump_state(unsigned int indent)
{
}


/* VCD dumping routines */

unsigned int MOD_mkFpMultiplier::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 1u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  if (levels != 1u)
  {
    unsigned int l = levels == 0u ? 0u : levels - 1u;
    num = INST_ifc_adder8_1.dump_VCD_defs(l);
    num = INST_ifc_adder8_2.dump_VCD_defs(l);
    num = INST_ifc_adder8_3.dump_VCD_defs(l);
    num = INST_ifc_multiplier8.dump_VCD_defs(l);
  }
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkFpMultiplier::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkFpMultiplier &backing)
{
  vcd_defs(dt, backing);
  if (levels != 1u)
    vcd_submodules(dt, levels - 1u, backing);
}

void MOD_mkFpMultiplier::vcd_defs(tVCDDumpType dt, MOD_mkFpMultiplier &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
    }
}

void MOD_mkFpMultiplier::vcd_submodules(tVCDDumpType dt,
					unsigned int levels,
					MOD_mkFpMultiplier &backing)
{
  INST_ifc_adder8_1.dump_VCD(dt, levels, backing.INST_ifc_adder8_1);
  INST_ifc_adder8_2.dump_VCD(dt, levels, backing.INST_ifc_adder8_2);
  INST_ifc_adder8_3.dump_VCD(dt, levels, backing.INST_ifc_adder8_3);
  INST_ifc_multiplier8.dump_VCD(dt, levels, backing.INST_ifc_multiplier8);
}
