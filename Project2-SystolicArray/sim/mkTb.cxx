/*
 * Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
 * 
 * On Sun Nov 17 07:27:54 IST 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkTb.h"


/* Literal declarations */
static unsigned int const UWide_literal_256_h7fff50004000000060000ffff00000001000d0007_arr[] = { 851975u,
												 1u,
												 65535u,
												 6u,
												 4294246404u,
												 7u,
												 0u,
												 0u };
static tUWide const UWide_literal_256_h7fff50004000000060000ffff00000001000d0007(256u,
										 UWide_literal_256_h7fff50004000000060000ffff00000001000d0007_arr);
static unsigned int const UWide_literal_256_h80007fff00000000d000400000000fff700070002_arr[] = { 458754u,
												 65527u,
												 262144u,
												 13u,
												 524272u,
												 8u,
												 0u,
												 0u };
static tUWide const UWide_literal_256_h80007fff00000000d000400000000fff700070002(256u,
										 UWide_literal_256_h80007fff00000000d000400000000fff700070002_arr);


/* String declarations */
static std::string const __str_literal_1("---------------- Cycle %d start ----------------------",
					 54u);
static std::string const __str_literal_3("The answer is: %d", 17u);
static std::string const __str_literal_2("b[%d][%d]: %16d", 15u);


/* Constructor */
MOD_mkTb::MOD_mkTb(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_i(simHdl, "i", this, 32u, 0u, (tUInt8)0u),
    INST_ifc(simHdl, "ifc", this),
    PORT_RST_N((tUInt8)1u),
    DEF_ifc_get_matrix_mul_result____d8(512u)
{
  symbol_count = 6u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTb::init_symbols_0()
{
  init_symbol(&symbols[0u], "i", SYM_MODULE, &INST_i);
  init_symbol(&symbols[1u], "ifc", SYM_MODULE, &INST_ifc);
  init_symbol(&symbols[2u], "RL_counter", SYM_RULE);
  init_symbol(&symbols[3u], "RL_stage1", SYM_RULE);
  init_symbol(&symbols[4u], "RL_stage2", SYM_RULE);
  init_symbol(&symbols[5u], "x__h6671", SYM_DEF, &DEF_x__h6671, 32u);
}


/* Rule actions */

void MOD_mkTb::RL_stage1()
{
  tUInt32 DEF_signed_0___d3;
  tUInt32 DEF_signed_1___d4;
  tUInt32 DEF_signed_2___d5;
  tUInt32 DEF_signed_3___d6;
  DEF_signed_3___d6 = 3u;
  DEF_signed_2___d5 = 2u;
  DEF_signed_1___d4 = 1u;
  DEF_signed_0___d3 = 0u;
  DEF_x__h6671 = INST_i.METH_read();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,32", &__str_literal_1, DEF_x__h6671);
  INST_ifc.METH_set_A_matrix_in(UWide_literal_256_h80007fff00000000d000400000000fff700070002);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl,
		   this,
		   "s,-32,-32,16",
		   &__str_literal_2,
		   DEF_signed_0___d3,
		   DEF_signed_0___d3,
		   7u);
    dollar_display(sim_hdl,
		   this,
		   "s,-32,-32,16",
		   &__str_literal_2,
		   DEF_signed_0___d3,
		   DEF_signed_1___d4,
		   13u);
    dollar_display(sim_hdl,
		   this,
		   "s,-32,-32,16",
		   &__str_literal_2,
		   DEF_signed_0___d3,
		   DEF_signed_2___d5,
		   1u);
    dollar_display(sim_hdl,
		   this,
		   "s,-32,-32,16",
		   &__str_literal_2,
		   DEF_signed_0___d3,
		   DEF_signed_3___d6,
		   0u);
    dollar_display(sim_hdl,
		   this,
		   "s,-32,-32,16",
		   &__str_literal_2,
		   DEF_signed_1___d4,
		   DEF_signed_0___d3,
		   65535u);
    dollar_display(sim_hdl,
		   this,
		   "s,-32,-32,16",
		   &__str_literal_2,
		   DEF_signed_1___d4,
		   DEF_signed_1___d4,
		   0u);
    dollar_display(sim_hdl,
		   this,
		   "s,-32,-32,16",
		   &__str_literal_2,
		   DEF_signed_1___d4,
		   DEF_signed_2___d5,
		   6u);
    dollar_display(sim_hdl,
		   this,
		   "s,-32,-32,16",
		   &__str_literal_2,
		   DEF_signed_1___d4,
		   DEF_signed_3___d6,
		   0u);
    dollar_display(sim_hdl,
		   this,
		   "s,-32,-32,16",
		   &__str_literal_2,
		   DEF_signed_2___d5,
		   DEF_signed_0___d3,
		   4u);
    dollar_display(sim_hdl,
		   this,
		   "s,-32,-32,16",
		   &__str_literal_2,
		   DEF_signed_2___d5,
		   DEF_signed_1___d4,
		   65525u);
    dollar_display(sim_hdl,
		   this,
		   "s,-32,-32,16",
		   &__str_literal_2,
		   DEF_signed_2___d5,
		   DEF_signed_2___d5,
		   7u);
    dollar_display(sim_hdl,
		   this,
		   "s,-32,-32,16",
		   &__str_literal_2,
		   DEF_signed_2___d5,
		   DEF_signed_3___d6,
		   0u);
    dollar_display(sim_hdl,
		   this,
		   "s,-32,-32,16",
		   &__str_literal_2,
		   DEF_signed_3___d6,
		   DEF_signed_0___d3,
		   0u);
    dollar_display(sim_hdl,
		   this,
		   "s,-32,-32,16",
		   &__str_literal_2,
		   DEF_signed_3___d6,
		   DEF_signed_1___d4,
		   0u);
    dollar_display(sim_hdl,
		   this,
		   "s,-32,-32,16",
		   &__str_literal_2,
		   DEF_signed_3___d6,
		   DEF_signed_2___d5,
		   0u);
    dollar_display(sim_hdl,
		   this,
		   "s,-32,-32,16",
		   &__str_literal_2,
		   DEF_signed_3___d6,
		   DEF_signed_3___d6,
		   0u);
  }
  INST_ifc.METH_set_B_matrix_in(UWide_literal_256_h7fff50004000000060000ffff00000001000d0007);
  INST_ifc.METH_set_s1_or_s2_top((tUInt8)1u);
}

void MOD_mkTb::RL_stage2()
{
  tUInt32 DEF_ifc_get_matrix_mul_result_BITS_31_TO_0___d9;
  tUInt32 DEF_ifc_get_matrix_mul_result_BITS_63_TO_32___d10;
  tUInt32 DEF_ifc_get_matrix_mul_result_BITS_95_TO_64___d11;
  tUInt32 DEF_ifc_get_matrix_mul_result_BITS_127_TO_96___d12;
  tUInt32 DEF_ifc_get_matrix_mul_result_BITS_159_TO_128___d13;
  tUInt32 DEF_ifc_get_matrix_mul_result_BITS_191_TO_160___d14;
  tUInt32 DEF_ifc_get_matrix_mul_result_BITS_223_TO_192___d15;
  tUInt32 DEF_ifc_get_matrix_mul_result_BITS_255_TO_224___d16;
  tUInt32 DEF_ifc_get_matrix_mul_result_BITS_287_TO_256___d17;
  tUInt32 DEF_ifc_get_matrix_mul_result_BITS_319_TO_288___d18;
  tUInt32 DEF_ifc_get_matrix_mul_result_BITS_351_TO_320___d19;
  tUInt32 DEF_ifc_get_matrix_mul_result_BITS_383_TO_352___d20;
  tUInt32 DEF_ifc_get_matrix_mul_result_BITS_415_TO_384___d21;
  tUInt32 DEF_ifc_get_matrix_mul_result_BITS_447_TO_416___d22;
  tUInt32 DEF_ifc_get_matrix_mul_result_BITS_479_TO_448___d23;
  tUInt32 DEF_ifc_get_matrix_mul_result_BITS_511_TO_480___d24;
  DEF_ifc_get_matrix_mul_result____d8 = INST_ifc.METH_get_matrix_mul_result();
  DEF_x__h6671 = INST_i.METH_read();
  DEF_ifc_get_matrix_mul_result_BITS_511_TO_480___d24 = DEF_ifc_get_matrix_mul_result____d8.get_whole_word(15u);
  DEF_ifc_get_matrix_mul_result_BITS_479_TO_448___d23 = DEF_ifc_get_matrix_mul_result____d8.get_whole_word(14u);
  DEF_ifc_get_matrix_mul_result_BITS_447_TO_416___d22 = DEF_ifc_get_matrix_mul_result____d8.get_whole_word(13u);
  DEF_ifc_get_matrix_mul_result_BITS_415_TO_384___d21 = DEF_ifc_get_matrix_mul_result____d8.get_whole_word(12u);
  DEF_ifc_get_matrix_mul_result_BITS_383_TO_352___d20 = DEF_ifc_get_matrix_mul_result____d8.get_whole_word(11u);
  DEF_ifc_get_matrix_mul_result_BITS_351_TO_320___d19 = DEF_ifc_get_matrix_mul_result____d8.get_whole_word(10u);
  DEF_ifc_get_matrix_mul_result_BITS_319_TO_288___d18 = DEF_ifc_get_matrix_mul_result____d8.get_whole_word(9u);
  DEF_ifc_get_matrix_mul_result_BITS_287_TO_256___d17 = DEF_ifc_get_matrix_mul_result____d8.get_whole_word(8u);
  DEF_ifc_get_matrix_mul_result_BITS_223_TO_192___d15 = DEF_ifc_get_matrix_mul_result____d8.get_whole_word(6u);
  DEF_ifc_get_matrix_mul_result_BITS_255_TO_224___d16 = DEF_ifc_get_matrix_mul_result____d8.get_whole_word(7u);
  DEF_ifc_get_matrix_mul_result_BITS_191_TO_160___d14 = DEF_ifc_get_matrix_mul_result____d8.get_whole_word(5u);
  DEF_ifc_get_matrix_mul_result_BITS_159_TO_128___d13 = DEF_ifc_get_matrix_mul_result____d8.get_whole_word(4u);
  DEF_ifc_get_matrix_mul_result_BITS_127_TO_96___d12 = DEF_ifc_get_matrix_mul_result____d8.get_whole_word(3u);
  DEF_ifc_get_matrix_mul_result_BITS_95_TO_64___d11 = DEF_ifc_get_matrix_mul_result____d8.get_whole_word(2u);
  DEF_ifc_get_matrix_mul_result_BITS_63_TO_32___d10 = DEF_ifc_get_matrix_mul_result____d8.get_whole_word(1u);
  DEF_ifc_get_matrix_mul_result_BITS_31_TO_0___d9 = DEF_ifc_get_matrix_mul_result____d8.get_whole_word(0u);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl, this, "s,32", &__str_literal_1, DEF_x__h6671);
    dollar_display(sim_hdl,
		   this,
		   "s,32",
		   &__str_literal_3,
		   DEF_ifc_get_matrix_mul_result_BITS_31_TO_0___d9);
    dollar_display(sim_hdl,
		   this,
		   "s,32",
		   &__str_literal_3,
		   DEF_ifc_get_matrix_mul_result_BITS_63_TO_32___d10);
    dollar_display(sim_hdl,
		   this,
		   "s,32",
		   &__str_literal_3,
		   DEF_ifc_get_matrix_mul_result_BITS_95_TO_64___d11);
    dollar_display(sim_hdl,
		   this,
		   "s,32",
		   &__str_literal_3,
		   DEF_ifc_get_matrix_mul_result_BITS_127_TO_96___d12);
    dollar_display(sim_hdl,
		   this,
		   "s,32",
		   &__str_literal_3,
		   DEF_ifc_get_matrix_mul_result_BITS_159_TO_128___d13);
    dollar_display(sim_hdl,
		   this,
		   "s,32",
		   &__str_literal_3,
		   DEF_ifc_get_matrix_mul_result_BITS_191_TO_160___d14);
    dollar_display(sim_hdl,
		   this,
		   "s,32",
		   &__str_literal_3,
		   DEF_ifc_get_matrix_mul_result_BITS_223_TO_192___d15);
    dollar_display(sim_hdl,
		   this,
		   "s,32",
		   &__str_literal_3,
		   DEF_ifc_get_matrix_mul_result_BITS_255_TO_224___d16);
    dollar_display(sim_hdl,
		   this,
		   "s,32",
		   &__str_literal_3,
		   DEF_ifc_get_matrix_mul_result_BITS_287_TO_256___d17);
    dollar_display(sim_hdl,
		   this,
		   "s,32",
		   &__str_literal_3,
		   DEF_ifc_get_matrix_mul_result_BITS_319_TO_288___d18);
    dollar_display(sim_hdl,
		   this,
		   "s,32",
		   &__str_literal_3,
		   DEF_ifc_get_matrix_mul_result_BITS_351_TO_320___d19);
    dollar_display(sim_hdl,
		   this,
		   "s,32",
		   &__str_literal_3,
		   DEF_ifc_get_matrix_mul_result_BITS_383_TO_352___d20);
    dollar_display(sim_hdl,
		   this,
		   "s,32",
		   &__str_literal_3,
		   DEF_ifc_get_matrix_mul_result_BITS_415_TO_384___d21);
    dollar_display(sim_hdl,
		   this,
		   "s,32",
		   &__str_literal_3,
		   DEF_ifc_get_matrix_mul_result_BITS_447_TO_416___d22);
    dollar_display(sim_hdl,
		   this,
		   "s,32",
		   &__str_literal_3,
		   DEF_ifc_get_matrix_mul_result_BITS_479_TO_448___d23);
    dollar_display(sim_hdl,
		   this,
		   "s,32",
		   &__str_literal_3,
		   DEF_ifc_get_matrix_mul_result_BITS_511_TO_480___d24);
    dollar_finish(sim_hdl, "32", 0u);
  }
}

void MOD_mkTb::RL_counter()
{
  tUInt32 DEF_x__h8870;
  DEF_x__h6671 = INST_i.METH_read();
  DEF_x__h8870 = DEF_x__h6671 + 1u;
  INST_i.METH_write(DEF_x__h8870);
}


/* Methods */


/* Reset routines */

void MOD_mkTb::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_ifc.reset_RST_N(ARG_rst_in);
  INST_i.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTb::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTb::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_i.dump_state(indent + 2u);
  INST_ifc.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTb::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 4u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "ifc_get_matrix_mul_result____d8", 512u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h6671", 32u);
  num = INST_i.dump_VCD_defs(num);
  if (levels != 1u)
  {
    unsigned int l = levels == 0u ? 0u : levels - 1u;
    num = INST_ifc.dump_VCD_defs(l);
  }
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTb::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTb &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
  if (levels != 1u)
    vcd_submodules(dt, levels - 1u, backing);
}

void MOD_mkTb::vcd_defs(tVCDDumpType dt, MOD_mkTb &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 512u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_ifc_get_matrix_mul_result____d8) != DEF_ifc_get_matrix_mul_result____d8)
      {
	vcd_write_val(sim_hdl, num, DEF_ifc_get_matrix_mul_result____d8, 512u);
	backing.DEF_ifc_get_matrix_mul_result____d8 = DEF_ifc_get_matrix_mul_result____d8;
      }
      ++num;
      if ((backing.DEF_x__h6671) != DEF_x__h6671)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h6671, 32u);
	backing.DEF_x__h6671 = DEF_x__h6671;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_ifc_get_matrix_mul_result____d8, 512u);
      backing.DEF_ifc_get_matrix_mul_result____d8 = DEF_ifc_get_matrix_mul_result____d8;
      vcd_write_val(sim_hdl, num++, DEF_x__h6671, 32u);
      backing.DEF_x__h6671 = DEF_x__h6671;
    }
}

void MOD_mkTb::vcd_prims(tVCDDumpType dt, MOD_mkTb &backing)
{
  INST_i.dump_VCD(dt, backing.INST_i);
}

void MOD_mkTb::vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkTb &backing)
{
  INST_ifc.dump_VCD(dt, levels, backing.INST_ifc);
}
